"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[1358],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(t),y=r,f=m["".concat(l,".").concat(y)]||m[y]||u[y]||i;return t?a.createElement(f,o(o({ref:n},c),{},{components:t})):a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=y;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[m]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7536:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:4},o="Keymaps",p={unversionedId:"configuration/keymaps",id:"configuration/keymaps",title:"Keymaps",description:"LazyVim provides multiple ways to configure keymaps.",source:"@site/docs/configuration/keymaps.md",sourceDirName:"configuration",slug:"/configuration/keymaps",permalink:"/configuration/keymaps",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/configuration/keymaps.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/configuration/plugins"},next:{title:"Examples",permalink:"/configuration/examples"}},l={},s=[{value:"Global keymaps",id:"global-keymaps",level:2},{value:"Plugin keymaps",id:"plugin-keymaps",level:2},{value:"LSP keymaps",id:"lsp-keymaps",level:2},{value:"Global LSP Keymaps",id:"global-lsp-keymaps",level:3},{value:"Server-Specific Keymaps",id:"server-specific-keymaps",level:3}],c={toc:s};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"keymaps"},"Keymaps"),(0,r.kt)("p",null,"LazyVim provides multiple ways to configure keymaps.\nIf you want to override an existing mapping, make sure to\ndisable it first in the correct place."),(0,r.kt)("h2",{id:"global-keymaps"},"Global keymaps"),(0,r.kt)("p",null,"Global keymaps are keymaps that are always active.\nYou can configure them in your ",(0,r.kt)("a",{parentName:"p",href:"/configuration/general#keymaps"},"lua/config/keymaps.lua")," file.\nDefault LazyVim keymaps can be deleted with ",(0,r.kt)("inlineCode",{parentName:"p"},"vim.keymap.del"),"."),(0,r.kt)("h2",{id:"plugin-keymaps"},"Plugin keymaps"),(0,r.kt)("p",null,"For more info on configuring plugin keymaps, see ",(0,r.kt)("a",{parentName:"p",href:"/configuration/plugins#%EF%B8%8F-adding--disabling-plugin-keymaps"},"Adding & Disabling Plugin Keymaps")),(0,r.kt)("h2",{id:"lsp-keymaps"},"LSP keymaps"),(0,r.kt)("p",null,"LSP keymaps are configured using the ",(0,r.kt)("inlineCode",{parentName:"p"},"keys")," option in your LSP server configuration.\nYou can add global keymaps that apply to all LSP servers using the special ",(0,r.kt)("inlineCode",{parentName:"p"},"servers['*']")," key,\nor server-specific keymaps."),(0,r.kt)("p",null,"For more info see ",(0,r.kt)("a",{parentName:"p",href:"/plugins/lsp#%EF%B8%8F-customizing-lsp-keymaps"},"Customizing LSP Keymaps")),(0,r.kt)("h3",{id:"global-lsp-keymaps"},"Global LSP Keymaps"),(0,r.kt)("p",null,"Global LSP keymaps apply to all LSP servers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      [\'*\'] = {\n        keys = {\n          -- Add or change a keymap\n          { "K", vim.lsp.buf.hover, desc = "Hover" },\n          -- Disable a keymap\n          { "gd", false },\n          -- Capability-based keymap (only set if server supports it)\n          { "<leader>ca", vim.lsp.buf.code_action, desc = "Code Action", has = "codeAction" },\n        },\n      },\n    },\n  },\n}\n')),(0,r.kt)("h3",{id:"server-specific-keymaps"},"Server-Specific Keymaps"),(0,r.kt)("p",null,"Add keymaps for specific LSP servers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      vtsls = {\n        keys = {\n          { "<leader>co", function()\n            vim.lsp.buf.code_action({\n              apply = true,\n              context = { only = { "source.organizeImports" }, diagnostics = {} },\n            })\n          end, desc = "Organize Imports" },\n        },\n      },\n    },\n  },\n}\n')))}m.isMDXComponent=!0}}]);