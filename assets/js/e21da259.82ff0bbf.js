"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[9501],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7462),r=n(7294),o=n(6010),s=n(2466),l=n(6550),i=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[i,u]=f({queryString:n,groupId:a}),[p,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=i??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,o]),tabValues:o}}var b=n(2389);const h="tabList__CuJ",v="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(p(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},s,{className:(0,o.Z)("tabs__item",v,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},2126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),s=n(5162);const l={},i="Neotest",u={unversionedId:"extras/test/core",id:"extras/test/core",title:"Neotest",description:"Please make sure to read the neotest docs on how to add test adapters.",source:"@site/docs/extras/test/core.md",sourceDirName:"extras/test",slug:"/extras/test/core",permalink:"/extras/test/core",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/test/core.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"none-ls",permalink:"/extras/lsp/none-ls"},next:{title:"Alpha",permalink:"/extras/ui/alpha"}},c={},p=[{value:"neotest",id:"neotest-1",level:2},{value:"nvim-nio",id:"nvim-nio",level:2},{value:"nvim-dap <em>(optional)</em>",id:"nvim-dap-optional",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"neotest"},"Neotest"),(0,r.kt)("p",null,"Please make sure to read the ",(0,r.kt)("strong",{parentName:"p"},"neotest")," docs on how to add test adapters."),(0,r.kt)("p",null,"Example on adding the plenary test adapter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="~/.config/nvim/lua/plugins/test.lua"',title:'"~/.config/nvim/lua/plugins/test.lua"'},'return {\n  { "nvim-neotest/neotest-plenary" },\n  {\n    "nvim-neotest/neotest",\n    opts = { adapters = { "neotest-plenary" } },\n  },\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"neotest-1"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neotest/neotest"},"neotest")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  -- Can be a list of adapters like what neotest expects,\n  -- or a list of adapter names,\n  -- or a table of adapter names, mapped to adapter configs.\n  -- The adapter will then be automatically loaded with the config.\n  adapters = {},\n  -- Example for loading neotest-golang with a custom config\n  -- adapters = {\n  --   ["neotest-golang"] = {\n  --     go_test_args = { "-v", "-race", "-count=1", "-timeout=60s" },\n  --     dap_go_enabled = true,\n  --   },\n  -- },\n  status = { virtual_text = true },\n  output = { open_on_run = true },\n  quickfix = {\n    open = function()\n      if LazyVim.has("trouble.nvim") then\n        require("trouble").open({ mode = "quickfix", focus = false })\n      else\n        vim.cmd("copen")\n      end\n    end,\n  },\n}\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-neotest/neotest",\n  dependencies = { "nvim-neotest/nvim-nio" },\n  opts = {\n    -- Can be a list of adapters like what neotest expects,\n    -- or a list of adapter names,\n    -- or a table of adapter names, mapped to adapter configs.\n    -- The adapter will then be automatically loaded with the config.\n    adapters = {},\n    -- Example for loading neotest-golang with a custom config\n    -- adapters = {\n    --   ["neotest-golang"] = {\n    --     go_test_args = { "-v", "-race", "-count=1", "-timeout=60s" },\n    --     dap_go_enabled = true,\n    --   },\n    -- },\n    status = { virtual_text = true },\n    output = { open_on_run = true },\n    quickfix = {\n      open = function()\n        if LazyVim.has("trouble.nvim") then\n          require("trouble").open({ mode = "quickfix", focus = false })\n        else\n          vim.cmd("copen")\n        end\n      end,\n    },\n  },\n  config = function(_, opts)\n    local neotest_ns = vim.api.nvim_create_namespace("neotest")\n    vim.diagnostic.config({\n      virtual_text = {\n        format = function(diagnostic)\n          -- Replace newline and tab characters with space for more compact diagnostics\n          local message = diagnostic.message:gsub("\\n", " "):gsub("\\t", " "):gsub("%s+", " "):gsub("^%s+", "")\n          return message\n        end,\n      },\n    }, neotest_ns)\n\n    if LazyVim.has("trouble.nvim") then\n      opts.consumers = opts.consumers or {}\n      -- Refresh and auto close trouble after running tests\n      ---@type neotest.Consumer\n      opts.consumers.trouble = function(client)\n        client.listeners.results = function(adapter_id, results, partial)\n          if partial then\n            return\n          end\n          local tree = assert(client:get_position(nil, { adapter = adapter_id }))\n\n          local failed = 0\n          for pos_id, result in pairs(results) do\n            if result.status == "failed" and tree:get_key(pos_id) then\n              failed = failed + 1\n            end\n          end\n          vim.schedule(function()\n            local trouble = require("trouble")\n            if trouble.is_open() then\n              trouble.refresh()\n              if failed == 0 then\n                trouble.close()\n              end\n            end\n          end)\n          return {}\n        end\n      end\n    end\n\n    if opts.adapters then\n      local adapters = {}\n      for name, config in pairs(opts.adapters or {}) do\n        if type(name) == "number" then\n          if type(config) == "string" then\n            config = require(config)\n          end\n          adapters[#adapters + 1] = config\n        elseif config ~= false then\n          local adapter = require(name)\n          if type(config) == "table" and not vim.tbl_isempty(config) then\n            local meta = getmetatable(adapter)\n            if adapter.setup then\n              adapter.setup(config)\n            elseif adapter.adapter then\n              adapter.adapter(config)\n              adapter = adapter.adapter\n            elseif meta and meta.__call then\n              adapter = adapter(config)\n            else\n              error("Adapter " .. name .. " does not support setup")\n            end\n          end\n          adapters[#adapters + 1] = adapter\n        end\n      end\n      opts.adapters = adapters\n    end\n\n    require("neotest").setup(opts)\n  end,\n  -- stylua: ignore\n  keys = {\n    {"<leader>t", "", desc = "+test"},\n    { "<leader>ta", function() require("neotest").run.attach() end, desc = "Attach to Test (Neotest)" },\n    { "<leader>tt", function() require("neotest").run.run(vim.fn.expand("%")) end, desc = "Run File (Neotest)" },\n    { "<leader>tT", function() require("neotest").run.run(vim.uv.cwd()) end, desc = "Run All Test Files (Neotest)" },\n    { "<leader>tr", function() require("neotest").run.run() end, desc = "Run Nearest (Neotest)" },\n    { "<leader>tl", function() require("neotest").run.run_last() end, desc = "Run Last (Neotest)" },\n    { "<leader>ts", function() require("neotest").summary.toggle() end, desc = "Toggle Summary (Neotest)" },\n    { "<leader>to", function() require("neotest").output.open({ enter = true, auto_close = true }) end, desc = "Show Output (Neotest)" },\n    { "<leader>tO", function() require("neotest").output_panel.toggle() end, desc = "Toggle Output Panel (Neotest)" },\n    { "<leader>tS", function() require("neotest").run.stop() end, desc = "Stop (Neotest)" },\n    { "<leader>tw", function() require("neotest").watch.toggle(vim.fn.expand("%")) end, desc = "Toggle Watch (Neotest)" },\n  },\n}\n')))),(0,r.kt)("h2",{id:"nvim-nio"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neotest/nvim-nio"},"nvim-nio")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{ "nvim-neotest/nvim-nio" }\n')))),(0,r.kt)("h2",{id:"nvim-dap-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-dap"},"nvim-dap")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mfussenegger/nvim-dap",\n  optional = true,\n  -- stylua: ignore\n  keys = {\n    { "<leader>td", function() require("neotest").run.run({strategy = "dap"}) end, desc = "Debug Nearest" },\n  },\n}\n')))))}m.isMDXComponent=!0}}]);