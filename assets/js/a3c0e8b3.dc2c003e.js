"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8769],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),r=t(6010);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>T});var a=t(7462),r=t(7294),o=t(6010),l=t(2466),i=t(6550),s=t(1980),c=t(7392),u=t(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,c]=f({queryString:t,groupId:a}),[p,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),b=(()=>{const e=s??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,o]),tabValues:o}}var b=t(2389);const v="tabList__CuJ",h="tabItem_LNqP";function y(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),a=c[t].value;a!==i&&(p(n),s(a))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.Z)("tabs__item",h,l?.className,{"tabs__item--active":i===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function x(e){const n=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",v)},r.createElement(y,(0,a.Z)({},e,n)),r.createElement(k,(0,a.Z)({},e,n)))}function T(e){const n=(0,b.Z)();return r.createElement(x,(0,a.Z)({key:String(n)},e))}},1354:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=t(7462),r=(t(7294),t(3905)),o=t(4866),l=t(5162);const i={},s="Clangd",c={unversionedId:"extras/lang/clangd",id:"extras/lang/clangd",title:"Clangd",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/lang/clangd.md",sourceDirName:"extras/lang",slug:"/extras/lang/clangd",permalink:"/extras/lang/clangd",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/lang/clangd.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Astro",permalink:"/extras/lang/astro"},next:{title:"Clojure",permalink:"/extras/lang/clojure"}},u={},p=[{value:"nvim-treesitter",id:"nvim-treesitter",level:2},{value:"clangd_extensions.nvim",id:"clangd_extensionsnvim",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"nvim-cmp <em>(optional)</em>",id:"nvim-cmp-optional",level:2},{value:"nvim-dap <em>(optional)</em>",id:"nvim-dap-optional",level:2},{value:"mason.nvim <em>(optional)</em>",id:"masonnvim-optional",level:2}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clangd"},"Clangd"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"nvim-treesitter"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter"},"nvim-treesitter")),(0,r.kt)("p",null," Add C/C++ to treesitter"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = { ensure_installed = { "cpp" } }\n'))),(0,r.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter",\n  opts = { ensure_installed = { "cpp" } },\n}\n')))),(0,r.kt)("h2",{id:"clangd_extensionsnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/p00f/clangd_extensions.nvim"},"clangd_extensions.nvim")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  inlay_hints = {\n    inline = false,\n  },\n  ast = {\n    --These require codicons (https://github.com/microsoft/vscode-codicons)\n    role_icons = {\n      type = "\ueb63",\n      declaration = "\uea8c",\n      expression = "\uea71",\n      specifier = "\ueb86",\n      statement = "\uea86",\n      ["template argument"] = "\uea92",\n    },\n    kind_icons = {\n      Compound = "\uea8b",\n      Recovery = "\uea87",\n      TranslationUnit = "\ueae9",\n      PackExpansion = "\uea7c",\n      TemplateTypeParm = "\uea92",\n      TemplateTemplateParm = "\uea92",\n      TemplateParamObject = "\uea92",\n    },\n  },\n}\n'))),(0,r.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "p00f/clangd_extensions.nvim",\n  lazy = true,\n  config = function() end,\n  opts = {\n    inlay_hints = {\n      inline = false,\n    },\n    ast = {\n      --These require codicons (https://github.com/microsoft/vscode-codicons)\n      role_icons = {\n        type = "\ueb63",\n        declaration = "\uea8c",\n        expression = "\uea71",\n        specifier = "\ueb86",\n        statement = "\uea86",\n        ["template argument"] = "\uea92",\n      },\n      kind_icons = {\n        Compound = "\uea8b",\n        Recovery = "\uea87",\n        TranslationUnit = "\ueae9",\n        PackExpansion = "\uea7c",\n        TemplateTypeParm = "\uea92",\n        TemplateTemplateParm = "\uea92",\n        TemplateParamObject = "\uea92",\n      },\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"nvim-lspconfig"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,r.kt)("p",null," Correctly setup lspconfig for clangd \ud83d\ude80"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  servers = {\n    -- Ensure mason installs the server\n    clangd = {\n      keys = {\n        { "<leader>ch", "<cmd>ClangdSwitchSourceHeader<cr>", desc = "Switch Source/Header (C/C++)" },\n      },\n      root_dir = function(fname)\n        return require("lspconfig.util").root_pattern(\n          "Makefile",\n          "configure.ac",\n          "configure.in",\n          "config.h.in",\n          "meson.build",\n          "meson_options.txt",\n          "build.ninja"\n        )(fname) or require("lspconfig.util").root_pattern("compile_commands.json", "compile_flags.txt")(\n          fname\n        ) or require("lspconfig.util").find_git_ancestor(fname)\n      end,\n      capabilities = {\n        offsetEncoding = { "utf-16" },\n      },\n      cmd = {\n        "clangd",\n        "--background-index",\n        "--clang-tidy",\n        "--header-insertion=iwyu",\n        "--completion-style=detailed",\n        "--function-arg-placeholders",\n        "--fallback-style=llvm",\n      },\n      init_options = {\n        usePlaceholders = true,\n        completeUnimported = true,\n        clangdFileStatus = true,\n      },\n    },\n  },\n  setup = {\n    clangd = function(_, opts)\n      local clangd_ext_opts = LazyVim.opts("clangd_extensions.nvim")\n      require("clangd_extensions").setup(vim.tbl_deep_extend("force", clangd_ext_opts or {}, { server = opts }))\n      return false\n    end,\n  },\n}\n'))),(0,r.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      -- Ensure mason installs the server\n      clangd = {\n        keys = {\n          { "<leader>ch", "<cmd>ClangdSwitchSourceHeader<cr>", desc = "Switch Source/Header (C/C++)" },\n        },\n        root_dir = function(fname)\n          return require("lspconfig.util").root_pattern(\n            "Makefile",\n            "configure.ac",\n            "configure.in",\n            "config.h.in",\n            "meson.build",\n            "meson_options.txt",\n            "build.ninja"\n          )(fname) or require("lspconfig.util").root_pattern("compile_commands.json", "compile_flags.txt")(\n            fname\n          ) or require("lspconfig.util").find_git_ancestor(fname)\n        end,\n        capabilities = {\n          offsetEncoding = { "utf-16" },\n        },\n        cmd = {\n          "clangd",\n          "--background-index",\n          "--clang-tidy",\n          "--header-insertion=iwyu",\n          "--completion-style=detailed",\n          "--function-arg-placeholders",\n          "--fallback-style=llvm",\n        },\n        init_options = {\n          usePlaceholders = true,\n          completeUnimported = true,\n          clangdFileStatus = true,\n        },\n      },\n    },\n    setup = {\n      clangd = function(_, opts)\n        local clangd_ext_opts = LazyVim.opts("clangd_extensions.nvim")\n        require("clangd_extensions").setup(vim.tbl_deep_extend("force", clangd_ext_opts or {}, { server = opts }))\n        return false\n      end,\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"nvim-cmp-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/hrsh7th/nvim-cmp"},"nvim-cmp")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  opts.sorting = opts.sorting or {}\n  opts.sorting.comparators = opts.sorting.comparators or {}\n  table.insert(opts.sorting.comparators, 1, require("clangd_extensions.cmp_scores"))\nend\n'))),(0,r.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "hrsh7th/nvim-cmp",\n  optional = true,\n  opts = function(_, opts)\n    opts.sorting = opts.sorting or {}\n    opts.sorting.comparators = opts.sorting.comparators or {}\n    table.insert(opts.sorting.comparators, 1, require("clangd_extensions.cmp_scores"))\n  end,\n}\n')))),(0,r.kt)("h2",{id:"nvim-dap-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-dap"},"nvim-dap")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local dap = require("dap")\n  if not dap.adapters["codelldb"] then\n    require("dap").adapters["codelldb"] = {\n      type = "server",\n      host = "localhost",\n      port = "${port}",\n      executable = {\n        command = "codelldb",\n        args = {\n          "--port",\n          "${port}",\n        },\n      },\n    }\n  end\n  for _, lang in ipairs({ "c", "cpp" }) do\n    dap.configurations[lang] = {\n      {\n        type = "codelldb",\n        request = "launch",\n        name = "Launch file",\n        program = function()\n          return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")\n        end,\n        cwd = "${workspaceFolder}",\n      },\n      {\n        type = "codelldb",\n        request = "attach",\n        name = "Attach to process",\n        pid = require("dap.utils").pick_process,\n        cwd = "${workspaceFolder}",\n      },\n    }\n  end\nend\n'))),(0,r.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mfussenegger/nvim-dap",\n  optional = true,\n  dependencies = {\n    -- Ensure C/C++ debugger is installed\n    "mason-org/mason.nvim",\n    optional = true,\n    opts = { ensure_installed = { "codelldb" } },\n  },\n  opts = function()\n    local dap = require("dap")\n    if not dap.adapters["codelldb"] then\n      require("dap").adapters["codelldb"] = {\n        type = "server",\n        host = "localhost",\n        port = "${port}",\n        executable = {\n          command = "codelldb",\n          args = {\n            "--port",\n            "${port}",\n          },\n        },\n      }\n    end\n    for _, lang in ipairs({ "c", "cpp" }) do\n      dap.configurations[lang] = {\n        {\n          type = "codelldb",\n          request = "launch",\n          name = "Launch file",\n          program = function()\n            return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")\n          end,\n          cwd = "${workspaceFolder}",\n        },\n        {\n          type = "codelldb",\n          request = "attach",\n          name = "Attach to process",\n          pid = require("dap.utils").pick_process,\n          cwd = "${workspaceFolder}",\n        },\n      }\n    end\n  end,\n}\n')))),(0,r.kt)("h2",{id:"masonnvim-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = { ensure_installed = { "codelldb" } }\n'))),(0,r.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  -- Ensure C/C++ debugger is installed\n  "mason-org/mason.nvim",\n  optional = true,\n  opts = { ensure_installed = { "codelldb" } },\n}\n')))))}m.isMDXComponent=!0}}]);