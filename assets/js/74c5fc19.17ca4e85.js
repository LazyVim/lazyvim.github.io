"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8612],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?a.createElement(f,o(o({ref:n},p),{},{components:t})):a.createElement(f,o({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const s="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>_});var a=t(7462),r=t(7294),s=t(6010),o=t(2466),i=t(6550),l=t(1980),c=t(7392),p=t(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function y(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[l,c]=f({queryString:t,groupId:a}),[u,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,p.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),g=(()=>{const e=l??u;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),y(e)}),[c,y,s]),tabValues:s}}var g=t(2389);const v="tabList__CuJ",h="tabItem_LNqP";function b(e){let{className:n,block:t,selectedValue:i,selectValue:l,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),d=e=>{const n=e.currentTarget,t=p.indexOf(n),a=c[t].value;a!==i&&(u(n),l(a))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>p.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.Z)("tabs__item",h,o?.className,{"tabs__item--active":i===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function w(e){const n=y(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",v)},r.createElement(b,(0,a.Z)({},e,n)),r.createElement(k,(0,a.Z)({},e,n)))}function _(e){const n=(0,g.Z)();return r.createElement(w,(0,a.Z)({key:String(n)},e))}},7007:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=t(7462),r=(t(7294),t(3905)),s=t(4866),o=t(5162);const i={},l="Typescript",c={unversionedId:"extras/lang/typescript",id:"extras/lang/typescript",title:"Typescript",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/lang/typescript.md",sourceDirName:"extras/lang",slug:"/extras/lang/typescript",permalink:"/extras/lang/typescript",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/lang/typescript.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Toml",permalink:"/extras/lang/toml"},next:{title:"Vue",permalink:"/extras/lang/vue"}},p={},u=[{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"mason.nvim",id:"masonnvim",level:2},{value:"mini.icons",id:"miniicons",level:2},{value:"nvim-dap <em>(optional)</em>",id:"nvim-dap-optional",level:2}],d={toc:u};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typescript"},"Typescript"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"nvim-lspconfig"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,r.kt)("p",null," correctly setup lspconfig"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  -- make sure mason installs the server\n  servers = {\n    --- @deprecated -- tsserver renamed to ts_ls but not yet released, so keep this for now\n    --- the proper approach is to check the nvim-lspconfig release version when it\'s released to determine the server name dynamically\n    tsserver = {\n      enabled = false,\n    },\n    ts_ls = {\n      enabled = false,\n    },\n    vtsls = {\n      -- explicitly add default filetypes, so that we can extend\n      -- them in related extras\n      filetypes = {\n        "javascript",\n        "javascriptreact",\n        "javascript.jsx",\n        "typescript",\n        "typescriptreact",\n        "typescript.tsx",\n      },\n      settings = {\n        complete_function_calls = true,\n        vtsls = {\n          enableMoveToFileCodeAction = true,\n          autoUseWorkspaceTsdk = true,\n          experimental = {\n            maxInlayHintLength = 30,\n            completion = {\n              enableServerSideFuzzyMatch = true,\n            },\n          },\n        },\n        typescript = {\n          updateImportsOnFileMove = { enabled = "always" },\n          suggest = {\n            completeFunctionCalls = true,\n          },\n          inlayHints = {\n            enumMemberValues = { enabled = true },\n            functionLikeReturnTypes = { enabled = true },\n            parameterNames = { enabled = "literals" },\n            parameterTypes = { enabled = true },\n            propertyDeclarationTypes = { enabled = true },\n            variableTypes = { enabled = false },\n          },\n        },\n      },\n      keys = {\n        {\n          "gD",\n          function()\n            local params = vim.lsp.util.make_position_params()\n            LazyVim.lsp.execute({\n              command = "typescript.goToSourceDefinition",\n              arguments = { params.textDocument.uri, params.position },\n              open = true,\n            })\n          end,\n          desc = "Goto Source Definition",\n        },\n        {\n          "gR",\n          function()\n            LazyVim.lsp.execute({\n              command = "typescript.findAllFileReferences",\n              arguments = { vim.uri_from_bufnr(0) },\n              open = true,\n            })\n          end,\n          desc = "File References",\n        },\n        {\n          "<leader>co",\n          LazyVim.lsp.action["source.organizeImports"],\n          desc = "Organize Imports",\n        },\n        {\n          "<leader>cM",\n          LazyVim.lsp.action["source.addMissingImports.ts"],\n          desc = "Add missing imports",\n        },\n        {\n          "<leader>cu",\n          LazyVim.lsp.action["source.removeUnused.ts"],\n          desc = "Remove unused imports",\n        },\n        {\n          "<leader>cD",\n          LazyVim.lsp.action["source.fixAll.ts"],\n          desc = "Fix all diagnostics",\n        },\n        {\n          "<leader>cV",\n          function()\n            LazyVim.lsp.execute({ command = "typescript.selectTypeScriptVersion" })\n          end,\n          desc = "Select TS workspace version",\n        },\n      },\n    },\n  },\n  setup = {\n    --- @deprecated -- tsserver renamed to ts_ls but not yet released, so keep this for now\n    --- the proper approach is to check the nvim-lspconfig release version when it\'s released to determine the server name dynamically\n    tsserver = function()\n      -- disable tsserver\n      return true\n    end,\n    ts_ls = function()\n      -- disable tsserver\n      return true\n    end,\n    vtsls = function(_, opts)\n      LazyVim.lsp.on_attach(function(client, buffer)\n        client.commands["_typescript.moveToFileRefactoring"] = function(command, ctx)\n          ---@type string, string, lsp.Range\n          local action, uri, range = unpack(command.arguments)\n\n          local function move(newf)\n            client:request("workspace/executeCommand", {\n              command = command.command,\n              arguments = { action, uri, range, newf },\n            })\n          end\n\n          local fname = vim.uri_to_fname(uri)\n          client:request("workspace/executeCommand", {\n            command = "typescript.tsserverRequest",\n            arguments = {\n              "getMoveToRefactoringFileSuggestions",\n              {\n                file = fname,\n                startLine = range.start.line + 1,\n                startOffset = range.start.character + 1,\n                endLine = range["end"].line + 1,\n                endOffset = range["end"].character + 1,\n              },\n            },\n          }, function(_, result)\n            ---@type string[]\n            local files = result.body.files\n            table.insert(files, 1, "Enter new path...")\n            vim.ui.select(files, {\n              prompt = "Select move destination:",\n              format_item = function(f)\n                return vim.fn.fnamemodify(f, ":~:.")\n              end,\n            }, function(f)\n              if f and f:find("^Enter new path") then\n                vim.ui.input({\n                  prompt = "Enter move destination:",\n                  default = vim.fn.fnamemodify(fname, ":h") .. "/",\n                  completion = "file",\n                }, function(newf)\n                  return newf and move(newf)\n                end)\n              elseif f then\n                move(f)\n              end\n            end)\n          end)\n        end\n      end, "vtsls")\n      -- copy typescript settings to javascript\n      opts.settings.javascript =\n        vim.tbl_deep_extend("force", {}, opts.settings.typescript, opts.settings.javascript or {})\n    end,\n  },\n}\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    -- make sure mason installs the server\n    servers = {\n      --- @deprecated -- tsserver renamed to ts_ls but not yet released, so keep this for now\n      --- the proper approach is to check the nvim-lspconfig release version when it\'s released to determine the server name dynamically\n      tsserver = {\n        enabled = false,\n      },\n      ts_ls = {\n        enabled = false,\n      },\n      vtsls = {\n        -- explicitly add default filetypes, so that we can extend\n        -- them in related extras\n        filetypes = {\n          "javascript",\n          "javascriptreact",\n          "javascript.jsx",\n          "typescript",\n          "typescriptreact",\n          "typescript.tsx",\n        },\n        settings = {\n          complete_function_calls = true,\n          vtsls = {\n            enableMoveToFileCodeAction = true,\n            autoUseWorkspaceTsdk = true,\n            experimental = {\n              maxInlayHintLength = 30,\n              completion = {\n                enableServerSideFuzzyMatch = true,\n              },\n            },\n          },\n          typescript = {\n            updateImportsOnFileMove = { enabled = "always" },\n            suggest = {\n              completeFunctionCalls = true,\n            },\n            inlayHints = {\n              enumMemberValues = { enabled = true },\n              functionLikeReturnTypes = { enabled = true },\n              parameterNames = { enabled = "literals" },\n              parameterTypes = { enabled = true },\n              propertyDeclarationTypes = { enabled = true },\n              variableTypes = { enabled = false },\n            },\n          },\n        },\n        keys = {\n          {\n            "gD",\n            function()\n              local params = vim.lsp.util.make_position_params()\n              LazyVim.lsp.execute({\n                command = "typescript.goToSourceDefinition",\n                arguments = { params.textDocument.uri, params.position },\n                open = true,\n              })\n            end,\n            desc = "Goto Source Definition",\n          },\n          {\n            "gR",\n            function()\n              LazyVim.lsp.execute({\n                command = "typescript.findAllFileReferences",\n                arguments = { vim.uri_from_bufnr(0) },\n                open = true,\n              })\n            end,\n            desc = "File References",\n          },\n          {\n            "<leader>co",\n            LazyVim.lsp.action["source.organizeImports"],\n            desc = "Organize Imports",\n          },\n          {\n            "<leader>cM",\n            LazyVim.lsp.action["source.addMissingImports.ts"],\n            desc = "Add missing imports",\n          },\n          {\n            "<leader>cu",\n            LazyVim.lsp.action["source.removeUnused.ts"],\n            desc = "Remove unused imports",\n          },\n          {\n            "<leader>cD",\n            LazyVim.lsp.action["source.fixAll.ts"],\n            desc = "Fix all diagnostics",\n          },\n          {\n            "<leader>cV",\n            function()\n              LazyVim.lsp.execute({ command = "typescript.selectTypeScriptVersion" })\n            end,\n            desc = "Select TS workspace version",\n          },\n        },\n      },\n    },\n    setup = {\n      --- @deprecated -- tsserver renamed to ts_ls but not yet released, so keep this for now\n      --- the proper approach is to check the nvim-lspconfig release version when it\'s released to determine the server name dynamically\n      tsserver = function()\n        -- disable tsserver\n        return true\n      end,\n      ts_ls = function()\n        -- disable tsserver\n        return true\n      end,\n      vtsls = function(_, opts)\n        LazyVim.lsp.on_attach(function(client, buffer)\n          client.commands["_typescript.moveToFileRefactoring"] = function(command, ctx)\n            ---@type string, string, lsp.Range\n            local action, uri, range = unpack(command.arguments)\n\n            local function move(newf)\n              client:request("workspace/executeCommand", {\n                command = command.command,\n                arguments = { action, uri, range, newf },\n              })\n            end\n\n            local fname = vim.uri_to_fname(uri)\n            client:request("workspace/executeCommand", {\n              command = "typescript.tsserverRequest",\n              arguments = {\n                "getMoveToRefactoringFileSuggestions",\n                {\n                  file = fname,\n                  startLine = range.start.line + 1,\n                  startOffset = range.start.character + 1,\n                  endLine = range["end"].line + 1,\n                  endOffset = range["end"].character + 1,\n                },\n              },\n            }, function(_, result)\n              ---@type string[]\n              local files = result.body.files\n              table.insert(files, 1, "Enter new path...")\n              vim.ui.select(files, {\n                prompt = "Select move destination:",\n                format_item = function(f)\n                  return vim.fn.fnamemodify(f, ":~:.")\n                end,\n              }, function(f)\n                if f and f:find("^Enter new path") then\n                  vim.ui.input({\n                    prompt = "Enter move destination:",\n                    default = vim.fn.fnamemodify(fname, ":h") .. "/",\n                    completion = "file",\n                  }, function(newf)\n                    return newf and move(newf)\n                  end)\n                elseif f then\n                  move(f)\n                end\n              end)\n            end)\n          end\n        end, "vtsls")\n        -- copy typescript settings to javascript\n        opts.settings.javascript =\n          vim.tbl_deep_extend("force", {}, opts.settings.typescript, opts.settings.javascript or {})\n      end,\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"masonnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  opts.ensure_installed = opts.ensure_installed or {}\n  table.insert(opts.ensure_installed, "js-debug-adapter")\nend\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mason-org/mason.nvim",\n  opts = function(_, opts)\n    opts.ensure_installed = opts.ensure_installed or {}\n    table.insert(opts.ensure_installed, "js-debug-adapter")\n  end,\n}\n')))),(0,r.kt)("h2",{id:"miniicons"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-mini/mini.icons"},"mini.icons")),(0,r.kt)("p",null," Filetype icons"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  file = {\n    [".eslintrc.js"] = { glyph = "\udb83\udc7a", hl = "MiniIconsYellow" },\n    [".node-version"] = { glyph = "\ue718", hl = "MiniIconsGreen" },\n    [".prettierrc"] = { glyph = "\ue6b4", hl = "MiniIconsPurple" },\n    [".yarnrc.yml"] = { glyph = "\ue6a7", hl = "MiniIconsBlue" },\n    ["eslint.config.js"] = { glyph = "\udb83\udc7a", hl = "MiniIconsYellow" },\n    ["package.json"] = { glyph = "\ue718", hl = "MiniIconsGreen" },\n    ["tsconfig.json"] = { glyph = "\ue628", hl = "MiniIconsAzure" },\n    ["tsconfig.build.json"] = { glyph = "\ue628", hl = "MiniIconsAzure" },\n    ["yarn.lock"] = { glyph = "\ue6a7", hl = "MiniIconsBlue" },\n  },\n}\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-mini/mini.icons",\n  opts = {\n    file = {\n      [".eslintrc.js"] = { glyph = "\udb83\udc7a", hl = "MiniIconsYellow" },\n      [".node-version"] = { glyph = "\ue718", hl = "MiniIconsGreen" },\n      [".prettierrc"] = { glyph = "\ue6b4", hl = "MiniIconsPurple" },\n      [".yarnrc.yml"] = { glyph = "\ue6a7", hl = "MiniIconsBlue" },\n      ["eslint.config.js"] = { glyph = "\udb83\udc7a", hl = "MiniIconsYellow" },\n      ["package.json"] = { glyph = "\ue718", hl = "MiniIconsGreen" },\n      ["tsconfig.json"] = { glyph = "\ue628", hl = "MiniIconsAzure" },\n      ["tsconfig.build.json"] = { glyph = "\ue628", hl = "MiniIconsAzure" },\n      ["yarn.lock"] = { glyph = "\ue6a7", hl = "MiniIconsBlue" },\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"nvim-dap-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-dap"},"nvim-dap")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local dap = require("dap")\n  if not dap.adapters["pwa-node"] then\n    require("dap").adapters["pwa-node"] = {\n      type = "server",\n      host = "localhost",\n      port = "${port}",\n      executable = {\n        command = "node",\n        -- \ud83d\udc80 Make sure to update this path to point to your installation\n        args = {\n          LazyVim.get_pkg_path("js-debug-adapter", "/js-debug/src/dapDebugServer.js"),\n          "${port}",\n        },\n      },\n    }\n  end\n  if not dap.adapters["node"] then\n    dap.adapters["node"] = function(cb, config)\n      if config.type == "node" then\n        config.type = "pwa-node"\n      end\n      local nativeAdapter = dap.adapters["pwa-node"]\n      if type(nativeAdapter) == "function" then\n        nativeAdapter(cb, config)\n      else\n        cb(nativeAdapter)\n      end\n    end\n  end\n\n  local js_filetypes = { "typescript", "javascript", "typescriptreact", "javascriptreact" }\n\n  local vscode = require("dap.ext.vscode")\n  vscode.type_to_filetypes["node"] = js_filetypes\n  vscode.type_to_filetypes["pwa-node"] = js_filetypes\n\n  for _, language in ipairs(js_filetypes) do\n    if not dap.configurations[language] then\n      dap.configurations[language] = {\n        {\n          type = "pwa-node",\n          request = "launch",\n          name = "Launch file",\n          program = "${file}",\n          cwd = "${workspaceFolder}",\n        },\n        {\n          type = "pwa-node",\n          request = "attach",\n          name = "Attach",\n          processId = require("dap.utils").pick_process,\n          cwd = "${workspaceFolder}",\n        },\n      }\n    end\n  end\nend\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mfussenegger/nvim-dap",\n  optional = true,\n  dependencies = {\n    {\n      "mason-org/mason.nvim",\n      opts = function(_, opts)\n        opts.ensure_installed = opts.ensure_installed or {}\n        table.insert(opts.ensure_installed, "js-debug-adapter")\n      end,\n    },\n  },\n  opts = function()\n    local dap = require("dap")\n    if not dap.adapters["pwa-node"] then\n      require("dap").adapters["pwa-node"] = {\n        type = "server",\n        host = "localhost",\n        port = "${port}",\n        executable = {\n          command = "node",\n          -- \ud83d\udc80 Make sure to update this path to point to your installation\n          args = {\n            LazyVim.get_pkg_path("js-debug-adapter", "/js-debug/src/dapDebugServer.js"),\n            "${port}",\n          },\n        },\n      }\n    end\n    if not dap.adapters["node"] then\n      dap.adapters["node"] = function(cb, config)\n        if config.type == "node" then\n          config.type = "pwa-node"\n        end\n        local nativeAdapter = dap.adapters["pwa-node"]\n        if type(nativeAdapter) == "function" then\n          nativeAdapter(cb, config)\n        else\n          cb(nativeAdapter)\n        end\n      end\n    end\n\n    local js_filetypes = { "typescript", "javascript", "typescriptreact", "javascriptreact" }\n\n    local vscode = require("dap.ext.vscode")\n    vscode.type_to_filetypes["node"] = js_filetypes\n    vscode.type_to_filetypes["pwa-node"] = js_filetypes\n\n    for _, language in ipairs(js_filetypes) do\n      if not dap.configurations[language] then\n        dap.configurations[language] = {\n          {\n            type = "pwa-node",\n            request = "launch",\n            name = "Launch file",\n            program = "${file}",\n            cwd = "${workspaceFolder}",\n          },\n          {\n            type = "pwa-node",\n            request = "attach",\n            name = "Attach",\n            processId = require("dap.utils").pick_process,\n            cwd = "${workspaceFolder}",\n          },\n        }\n      end\n    end\n  end,\n}\n')))))}m.isMDXComponent=!0}}]);