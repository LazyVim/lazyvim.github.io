"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[7928],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),d=s,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return t?a.createElement(f,r(r({ref:n},c),{},{components:t})):a.createElement(f,r({ref:n},c))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,r=new Array(i);r[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:s,r[1]=o;for(var u=2;u<i;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294),s=t(6010);const i="tabItem_Ymn6";function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(i,r),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var a=t(7462),s=t(7294),i=t(6010),r=t(2466),o=t(6550),l=t(1980),u=t(7392),c=t(12);function p(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}function m(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[r,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[l,u]=f({queryString:t,groupId:a}),[p,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,c.Nk)(t);return[a,(0,s.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),g=(()=>{const e=l??p;return d({value:e,tabValues:i})?e:null})();(0,s.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),v(e)}),[u,v,i]),tabValues:i}}var g=t(2389);const y="tabList__CuJ",b="tabItem_LNqP";function h(e){let{className:n,block:t,selectedValue:o,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==o&&(p(n),l(a))},d=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:r}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:m},r,{className:(0,i.Z)("tabs__item",b,r?.className,{"tabs__item--active":o===n})}),t??n)})))}function _(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function k(e){const n=v(e);return s.createElement("div",{className:(0,i.Z)("tabs-container",y)},s.createElement(h,(0,a.Z)({},e,n)),s.createElement(_,(0,a.Z)({},e,n)))}function w(e){const n=(0,g.Z)();return s.createElement(k,(0,a.Z)({key:String(n)},e))}},965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=t(7462),s=(t(7294),t(3905)),i=t(4866),r=t(5162);const o={},l="LSP",u={unversionedId:"plugins/lsp",id:"plugins/lsp",title:"LSP",description:"\u2328\ufe0f Customizing LSP Keymaps",source:"@site/docs/plugins/lsp.md",sourceDirName:"plugins",slug:"/plugins/lsp",permalink:"/plugins/lsp",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/plugins/lsp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linting",permalink:"/plugins/linting"},next:{title:"TreeSitter",permalink:"/plugins/treesitter"}},c={},p=[{value:"\u2328\ufe0f Customizing LSP Keymaps",id:"\ufe0f-customizing-lsp-keymaps",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"mason.nvim",id:"masonnvim",level:2},{value:"mason-lspconfig.nvim",id:"mason-lspconfignvim",level:2},{value:"mason.nvim",id:"masonnvim-1",level:2}],m={toc:p};function d(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"lsp"},"LSP"),(0,s.kt)("h2",{id:"\ufe0f-customizing-lsp-keymaps"},"\u2328\ufe0f Customizing ",(0,s.kt)("a",{parentName:"h2",href:"/keymaps#lsp"},"LSP Keymaps")),(0,s.kt)("p",null,"The syntax for adding, deleting and changing ",(0,s.kt)("a",{parentName:"p",href:"/keymaps#lsp"},"LSP Keymaps"),",\nis the same as for ",(0,s.kt)("a",{parentName:"p",href:"/configuration/plugins#%EF%B8%8F-adding--disabling-plugin-keymaps"},"plugin keymaps"),",\nbut you need to configure it using the ",(0,s.kt)("inlineCode",{parentName:"p"},"opts()")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'-- LSP keymaps\n{\n  "neovim/nvim-lspconfig",\n  opts = function()\n    local keys = require("lazyvim.plugins.lsp.keymaps").get()\n    -- change a keymap\n    keys[#keys + 1] = { "K", "<cmd>echo \'hello\'<cr>" }\n    -- disable a keymap\n    keys[#keys + 1] = { "K", false }\n    -- add a keymap\n    keys[#keys + 1] = { "H", "<cmd>echo \'hello\'<cr>" }\n  end,\n}\n')),(0,s.kt)("h2",{id:"nvim-lspconfig"},(0,s.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,s.kt)("p",null," lspconfig"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  ---@class PluginLspOpts\n  local ret = {\n    -- options for vim.diagnostic.config()\n    ---@type vim.diagnostic.Opts\n    diagnostics = {\n      underline = true,\n      update_in_insert = false,\n      virtual_text = {\n        spacing = 4,\n        source = "if_many",\n        prefix = "\u25cf",\n        -- this will set set the prefix to a function that returns the diagnostics icon based on the severity\n        -- this only works on a recent 0.10.0 build. Will be set to "\u25cf" when not supported\n        -- prefix = "icons",\n      },\n      severity_sort = true,\n      signs = {\n        text = {\n          [vim.diagnostic.severity.ERROR] = LazyVim.config.icons.diagnostics.Error,\n          [vim.diagnostic.severity.WARN] = LazyVim.config.icons.diagnostics.Warn,\n          [vim.diagnostic.severity.HINT] = LazyVim.config.icons.diagnostics.Hint,\n          [vim.diagnostic.severity.INFO] = LazyVim.config.icons.diagnostics.Info,\n        },\n      },\n    },\n    -- Enable this to enable the builtin LSP inlay hints on Neovim >= 0.10.0\n    -- Be aware that you also will need to properly configure your LSP server to\n    -- provide the inlay hints.\n    inlay_hints = {\n      enabled = true,\n      exclude = { "vue" }, -- filetypes for which you don\'t want to enable inlay hints\n    },\n    -- Enable this to enable the builtin LSP code lenses on Neovim >= 0.10.0\n    -- Be aware that you also will need to properly configure your LSP server to\n    -- provide the code lenses.\n    codelens = {\n      enabled = false,\n    },\n    -- add any global capabilities here\n    capabilities = {\n      workspace = {\n        fileOperations = {\n          didRename = true,\n          willRename = true,\n        },\n      },\n    },\n    -- options for vim.lsp.buf.format\n    -- `bufnr` and `filter` is handled by the LazyVim formatter,\n    -- but can be also overridden when specified\n    format = {\n      formatting_options = nil,\n      timeout_ms = nil,\n    },\n    -- LSP Server Settings\n    ---@type lspconfig.options\n    servers = {\n      lua_ls = {\n        -- mason = false, -- set to false if you don\'t want this server to be installed with mason\n        -- Use this to add any additional keymaps\n        -- for specific lsp servers\n        -- ---@type LazyKeysSpec[]\n        -- keys = {},\n        settings = {\n          Lua = {\n            workspace = {\n              checkThirdParty = false,\n            },\n            codeLens = {\n              enable = true,\n            },\n            completion = {\n              callSnippet = "Replace",\n            },\n            doc = {\n              privateName = { "^_" },\n            },\n            hint = {\n              enable = true,\n              setType = false,\n              paramType = true,\n              paramName = "Disable",\n              semicolon = "Disable",\n              arrayIndex = "Disable",\n            },\n          },\n        },\n      },\n    },\n    -- you can do any additional lsp server setup here\n    -- return true if you don\'t want this server to be setup with lspconfig\n    ---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>\n    setup = {\n      -- example to setup with typescript.nvim\n      -- tsserver = function(_, opts)\n      --   require("typescript").setup({ server = opts })\n      --   return true\n      -- end,\n      -- Specify * to use this function as a fallback for any server\n      -- ["*"] = function(server, opts) end,\n    },\n  }\n  return ret\nend\n'))),(0,s.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  event = { "BufReadPre", "BufNewFile", "BufWritePre" },\n  dependencies = {\n    "mason.nvim",\n    { "mason-org/mason-lspconfig.nvim", config = function() end },\n  },\n  opts = function()\n    ---@class PluginLspOpts\n    local ret = {\n      -- options for vim.diagnostic.config()\n      ---@type vim.diagnostic.Opts\n      diagnostics = {\n        underline = true,\n        update_in_insert = false,\n        virtual_text = {\n          spacing = 4,\n          source = "if_many",\n          prefix = "\u25cf",\n          -- this will set set the prefix to a function that returns the diagnostics icon based on the severity\n          -- this only works on a recent 0.10.0 build. Will be set to "\u25cf" when not supported\n          -- prefix = "icons",\n        },\n        severity_sort = true,\n        signs = {\n          text = {\n            [vim.diagnostic.severity.ERROR] = LazyVim.config.icons.diagnostics.Error,\n            [vim.diagnostic.severity.WARN] = LazyVim.config.icons.diagnostics.Warn,\n            [vim.diagnostic.severity.HINT] = LazyVim.config.icons.diagnostics.Hint,\n            [vim.diagnostic.severity.INFO] = LazyVim.config.icons.diagnostics.Info,\n          },\n        },\n      },\n      -- Enable this to enable the builtin LSP inlay hints on Neovim >= 0.10.0\n      -- Be aware that you also will need to properly configure your LSP server to\n      -- provide the inlay hints.\n      inlay_hints = {\n        enabled = true,\n        exclude = { "vue" }, -- filetypes for which you don\'t want to enable inlay hints\n      },\n      -- Enable this to enable the builtin LSP code lenses on Neovim >= 0.10.0\n      -- Be aware that you also will need to properly configure your LSP server to\n      -- provide the code lenses.\n      codelens = {\n        enabled = false,\n      },\n      -- add any global capabilities here\n      capabilities = {\n        workspace = {\n          fileOperations = {\n            didRename = true,\n            willRename = true,\n          },\n        },\n      },\n      -- options for vim.lsp.buf.format\n      -- `bufnr` and `filter` is handled by the LazyVim formatter,\n      -- but can be also overridden when specified\n      format = {\n        formatting_options = nil,\n        timeout_ms = nil,\n      },\n      -- LSP Server Settings\n      ---@type lspconfig.options\n      servers = {\n        lua_ls = {\n          -- mason = false, -- set to false if you don\'t want this server to be installed with mason\n          -- Use this to add any additional keymaps\n          -- for specific lsp servers\n          -- ---@type LazyKeysSpec[]\n          -- keys = {},\n          settings = {\n            Lua = {\n              workspace = {\n                checkThirdParty = false,\n              },\n              codeLens = {\n                enable = true,\n              },\n              completion = {\n                callSnippet = "Replace",\n              },\n              doc = {\n                privateName = { "^_" },\n              },\n              hint = {\n                enable = true,\n                setType = false,\n                paramType = true,\n                paramName = "Disable",\n                semicolon = "Disable",\n                arrayIndex = "Disable",\n              },\n            },\n          },\n        },\n      },\n      -- you can do any additional lsp server setup here\n      -- return true if you don\'t want this server to be setup with lspconfig\n      ---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>\n      setup = {\n        -- example to setup with typescript.nvim\n        -- tsserver = function(_, opts)\n        --   require("typescript").setup({ server = opts })\n        --   return true\n        -- end,\n        -- Specify * to use this function as a fallback for any server\n        -- ["*"] = function(server, opts) end,\n      },\n    }\n    return ret\n  end,\n  ---@param opts PluginLspOpts\n  config = function(_, opts)\n    -- setup autoformat\n    LazyVim.format.register(LazyVim.lsp.formatter())\n\n    -- setup keymaps\n    LazyVim.lsp.on_attach(function(client, buffer)\n      require("lazyvim.plugins.lsp.keymaps").on_attach(client, buffer)\n    end)\n\n    LazyVim.lsp.setup()\n    LazyVim.lsp.on_dynamic_capability(require("lazyvim.plugins.lsp.keymaps").on_attach)\n\n    -- inlay hints\n    if opts.inlay_hints.enabled then\n      LazyVim.lsp.on_supports_method("textDocument/inlayHint", function(client, buffer)\n        if\n          vim.api.nvim_buf_is_valid(buffer)\n          and vim.bo[buffer].buftype == ""\n          and not vim.tbl_contains(opts.inlay_hints.exclude, vim.bo[buffer].filetype)\n        then\n          vim.lsp.inlay_hint.enable(true, { bufnr = buffer })\n        end\n      end)\n    end\n\n    -- code lens\n    if opts.codelens.enabled and vim.lsp.codelens then\n      LazyVim.lsp.on_supports_method("textDocument/codeLens", function(client, buffer)\n        vim.lsp.codelens.refresh()\n        vim.api.nvim_create_autocmd({ "BufEnter", "CursorHold", "InsertLeave" }, {\n          buffer = buffer,\n          callback = vim.lsp.codelens.refresh,\n        })\n      end)\n    end\n\n    if type(opts.diagnostics.virtual_text) == "table" and opts.diagnostics.virtual_text.prefix == "icons" then\n      opts.diagnostics.virtual_text.prefix = function(diagnostic)\n        local icons = LazyVim.config.icons.diagnostics\n        for d, icon in pairs(icons) do\n          if diagnostic.severity == vim.diagnostic.severity[d:upper()] then\n            return icon\n          end\n        end\n      end\n    end\n\n    vim.diagnostic.config(vim.deepcopy(opts.diagnostics))\n\n    local servers = opts.servers\n    local has_cmp, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")\n    local has_blink, blink = pcall(require, "blink.cmp")\n    local capabilities = vim.tbl_deep_extend(\n      "force",\n      {},\n      vim.lsp.protocol.make_client_capabilities(),\n      has_cmp and cmp_nvim_lsp.default_capabilities() or {},\n      has_blink and blink.get_lsp_capabilities() or {},\n      opts.capabilities or {}\n    )\n\n    -- get all the servers that are available through mason-lspconfig\n    local have_mason, mlsp = pcall(require, "mason-lspconfig")\n    local all_mslp_servers = {}\n    all_mslp_servers = vim.tbl_keys(require("mason-lspconfig.mappings").get_mason_map().lspconfig_to_package)\n\n    local exclude_automatic_enable = {} ---@type string[]\n\n    local function configure(server)\n      local server_opts = vim.tbl_deep_extend("force", {\n        capabilities = vim.deepcopy(capabilities),\n      }, servers[server] or {})\n\n      if opts.setup[server] then\n        if opts.setup[server](server, server_opts) then\n          return true\n        end\n      elseif opts.setup["*"] then\n        if opts.setup["*"](server, server_opts) then\n          return true\n        end\n      end\n      vim.lsp.config(server, server_opts)\n\n      -- manually enable if mason=false or if this is a server that cannot be installed with mason-lspconfig\n      if server_opts.mason == false or not vim.tbl_contains(all_mslp_servers, server) then\n        vim.lsp.enable(server)\n        return true\n      end\n      return false\n    end\n\n    local ensure_installed = {} ---@type string[]\n    for server, server_opts in pairs(servers) do\n      if server_opts then\n        server_opts = server_opts == true and {} or server_opts\n        if server_opts.enabled ~= false then\n          -- run manual setup if mason=false or if this is a server that cannot be installed with mason-lspconfig\n          if configure(server) then\n            exclude_automatic_enable[#exclude_automatic_enable + 1] = server\n          else\n            ensure_installed[#ensure_installed + 1] = server\n          end\n        else\n          exclude_automatic_enable[#exclude_automatic_enable + 1] = server\n        end\n      end\n    end\n\n    if have_mason then\n      local setup_config = {\n        ensure_installed = vim.tbl_deep_extend(\n          "force",\n          ensure_installed,\n          LazyVim.opts("mason-lspconfig.nvim").ensure_installed or {}\n        ),\n      }\n\n      setup_config.automatic_enable = {\n        exclude = exclude_automatic_enable,\n      }\n\n      mlsp.setup(setup_config)\n    end\n\n    if LazyVim.lsp.is_enabled("denols") and LazyVim.lsp.is_enabled("vtsls") then\n      local is_deno = require("lspconfig.util").root_pattern("deno.json", "deno.jsonc")\n      LazyVim.lsp.disable("vtsls", is_deno)\n      LazyVim.lsp.disable("denols", function(root_dir, config)\n        if not is_deno(root_dir) then\n          config.settings.deno.enable = false\n        end\n        return false\n      end)\n    end\n  end,\n}\n')))),(0,s.kt)("h2",{id:"masonnvim"},(0,s.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,s.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mason.nvim",\n  { "mason-org/mason-lspconfig.nvim", config = function() end },\n}\n')))),(0,s.kt)("h2",{id:"mason-lspconfignvim"},(0,s.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason-lspconfig.nvim"},"mason-lspconfig.nvim")),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,s.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'{ "mason-org/mason-lspconfig.nvim", config = function() end }\n')))),(0,s.kt)("h2",{id:"masonnvim-1"},(0,s.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")),(0,s.kt)("p",null," cmdline tools and lsp servers"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  ensure_installed = {\n    "stylua",\n    "shfmt",\n  },\n}\n'))),(0,s.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'{\n\n  "mason-org/mason.nvim",\n  cmd = "Mason",\n  keys = { { "<leader>cm", "<cmd>Mason<cr>", desc = "Mason" } },\n  build = ":MasonUpdate",\n  opts_extend = { "ensure_installed" },\n  opts = {\n    ensure_installed = {\n      "stylua",\n      "shfmt",\n    },\n  },\n  ---@param opts MasonSettings | {ensure_installed: string[]}\n  config = function(_, opts)\n    require("mason").setup(opts)\n    local mr = require("mason-registry")\n    mr:on("package:install:success", function()\n      vim.defer_fn(function()\n        -- trigger FileType event to possibly load this newly installed LSP server\n        require("lazy.core.handler.event").trigger({\n          event = "FileType",\n          buf = vim.api.nvim_get_current_buf(),\n        })\n      end, 100)\n    end)\n\n    mr.refresh(function()\n      for _, tool in ipairs(opts.ensure_installed) do\n        local p = mr.get_package(tool)\n        if not p:is_installed() then\n          p:install()\n        end\n      end\n    end)\n  end,\n}\n')))))}d.isMDXComponent=!0}}]);