"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[9983],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>x});var r=n(7462),a=n(7294),i=n(6010),l=n(2466),o=n(6550),s=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=m(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,u]=f({queryString:n,groupId:r}),[p,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=s??p;return d({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),v(e)}),[u,v,i]),tabValues:i}}var b=n(2389);const y="tabList__CuJ",g="tabItem_LNqP";function h(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),r=u[n].value;r!==o&&(p(t),s(r))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:m},l,{className:(0,i.Z)("tabs__item",g,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function T(e){const t=v(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",y)},a.createElement(h,(0,r.Z)({},e,t)),a.createElement(k,(0,r.Z)({},e,t)))}function x(e){const t=(0,b.Z)();return a.createElement(T,(0,r.Z)({key:String(t)},e))}},4965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=n(4866),l=n(5162);const o={},s="TreeSitter",u={unversionedId:"plugins/treesitter",id:"plugins/treesitter",title:"TreeSitter",description:"nvim-treesitter",source:"@site/docs/plugins/treesitter.md",sourceDirName:"plugins",slug:"/plugins/treesitter",permalink:"/plugins/treesitter",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/plugins/treesitter.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LSP",permalink:"/plugins/lsp"},next:{title:"UI",permalink:"/plugins/ui"}},c={},p=[{value:"nvim-treesitter",id:"nvim-treesitter",level:2},{value:"nvim-treesitter-textobjects",id:"nvim-treesitter-textobjects",level:2},{value:"nvim-ts-autotag",id:"nvim-ts-autotag",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"treesitter"},"TreeSitter"),(0,a.kt)("h2",{id:"nvim-treesitter"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter"},"nvim-treesitter")),(0,a.kt)("p",null," Treesitter is a new parser generator tool that we can\nuse in Neovim to power faster and more accurate\nsyntax highlighting."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  -- LazyVim config for treesitter\n  ensure_installed = {\n    "bash",\n    "c",\n    "diff",\n    "html",\n    "javascript",\n    "jsdoc",\n    "json",\n    "jsonc",\n    "lua",\n    "luadoc",\n    "luap",\n    "markdown",\n    "markdown_inline",\n    "printf",\n    "python",\n    "query",\n    "regex",\n    "toml",\n    "tsx",\n    "typescript",\n    "vim",\n    "vimdoc",\n    "xml",\n    "yaml",\n  },\n}\n'))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter",\n  branch = "main",\n  version = false, -- last release is way too old and doesn\'t work on Windows\n  build = function()\n    local TS = require("nvim-treesitter")\n    if not TS.get_installed then\n      LazyVim.error("Please restart Neovim and run `:TSUpdate` to use the `nvim-treesitter` **main** branch.")\n      return\n    end\n    TS.update(nil, { summary = true })\n  end,\n  lazy = vim.fn.argc(-1) == 0, -- load treesitter early when opening a file from the cmdline\n  event = { "LazyFile", "VeryLazy" },\n  cmd = { "TSUpdate", "TSInstall", "TSLog", "TSUninstall" },\n  opts_extend = { "ensure_installed" },\n  ---@class lazyvim.TSConfig: TSConfig\n  opts = {\n    -- LazyVim config for treesitter\n    ensure_installed = {\n      "bash",\n      "c",\n      "diff",\n      "html",\n      "javascript",\n      "jsdoc",\n      "json",\n      "jsonc",\n      "lua",\n      "luadoc",\n      "luap",\n      "markdown",\n      "markdown_inline",\n      "printf",\n      "python",\n      "query",\n      "regex",\n      "toml",\n      "tsx",\n      "typescript",\n      "vim",\n      "vimdoc",\n      "xml",\n      "yaml",\n    },\n  },\n  ---@param opts lazyvim.TSConfig\n  config = function(_, opts)\n    local TS = require("nvim-treesitter")\n\n    -- some quick sanity checks\n    if not TS.get_installed then\n      return LazyVim.error("Please use `:Lazy` and update `nvim-treesitter`")\n    elseif vim.fn.executable("tree-sitter") == 0 then\n      return LazyVim.error({\n        "**treesitter-main** requires the `tree-sitter` CLI executable to be installed.",\n        "Run `:checkhealth nvim-treesitter` for more information.",\n      })\n    elseif type(opts.ensure_installed) ~= "table" then\n      return LazyVim.error("`nvim-treesitter` opts.ensure_installed must be a table")\n    end\n\n    -- setup treesitter\n    TS.setup(opts)\n\n    LazyVim.treesitter.get_installed(true) -- initialize the installed langs\n\n    -- install missing parsers\n    local install = vim.tbl_filter(function(lang)\n      return not LazyVim.treesitter.have(lang)\n    end, opts.ensure_installed or {})\n    if #install > 0 then\n      TS.install(install, { summary = true }):await(function()\n        LazyVim.treesitter.get_installed(true) -- refresh the installed langs\n      end)\n    end\n\n    -- treesitter highlighting\n    vim.api.nvim_create_autocmd("FileType", {\n      group = vim.api.nvim_create_augroup("lazyvim_treesitter", { clear = true }),\n      callback = function(ev)\n        if LazyVim.treesitter.have(ev.match) then\n          pcall(vim.treesitter.start)\n\n          -- check if ftplugins changed foldexpr/indentexpr\n          for _, option in ipairs({ "foldexpr", "indentexpr" }) do\n            local expr = "v:lua.LazyVim.treesitter." .. option .. "()"\n            if vim.opt_global[option]:get() == expr then\n              vim.opt_local[option] = expr\n            end\n          end\n        end\n      end,\n    })\n  end,\n}\n')))),(0,a.kt)("h2",{id:"nvim-treesitter-textobjects"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter-textobjects"},"nvim-treesitter-textobjects")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter-textobjects",\n  branch = "main",\n  event = "VeryLazy",\n  opts = {},\n  keys = function()\n    local moves = {\n      goto_next_start = { ["]f"] = "@function.outer", ["]c"] = "@class.outer", ["]a"] = "@parameter.inner" },\n      goto_next_end = { ["]F"] = "@function.outer", ["]C"] = "@class.outer", ["]A"] = "@parameter.inner" },\n      goto_previous_start = { ["[f"] = "@function.outer", ["[c"] = "@class.outer", ["[a"] = "@parameter.inner" },\n      goto_previous_end = { ["[F"] = "@function.outer", ["[C"] = "@class.outer", ["[A"] = "@parameter.inner" },\n    }\n    local ret = {} ---@type LazyKeysSpec[]\n    for method, keymaps in pairs(moves) do\n      for key, query in pairs(keymaps) do\n        local desc = query:gsub("@", ""):gsub("%..*", "")\n        desc = desc:sub(1, 1):upper() .. desc:sub(2)\n        desc = (key:sub(1, 1) == "[" and "Prev " or "Next ") .. desc\n        desc = desc .. (key:sub(2, 2) == key:sub(2, 2):upper() and " End" or " Start")\n        ret[#ret + 1] = {\n          key,\n          function()\n            -- don\'t use treesitter if in diff mode and the key is one of the c/C keys\n            if vim.wo.diff and key:find("[cC]") then\n              return vim.cmd("normal! " .. key)\n            end\n            require("nvim-treesitter-textobjects.move")[method](query, "textobjects")\n          end,\n          desc = desc,\n          mode = { "n", "x", "o" },\n          silent = true,\n        }\n      end\n    end\n    return ret\n  end,\n  config = function(_, opts)\n    local TS = require("nvim-treesitter-textobjects")\n    if not TS.setup then\n      LazyVim.error("Please use `:Lazy` and update `nvim-treesitter`")\n      return\n    end\n    TS.setup(opts)\n  end,\n}\n')))),(0,a.kt)("h2",{id:"nvim-ts-autotag"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/windwp/nvim-ts-autotag"},"nvim-ts-autotag")),(0,a.kt)("p",null," Automatically add closing tags for HTML and JSX"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "windwp/nvim-ts-autotag",\n  event = "LazyFile",\n  opts = {},\n}\n')))))}d.isMDXComponent=!0}}]);