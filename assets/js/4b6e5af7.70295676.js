"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[7780],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,f=p["".concat(u,".").concat(m)]||p[m]||c[m]||i;return t?a.createElement(f,o(o({ref:n},d),{},{components:t})):a.createElement(f,o({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>T});var a=t(7462),r=t(7294),i=t(6010),o=t(2466),l=t(6550),u=t(1980),s=t(7392),d=t(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function c(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,u._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=c(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[u,s]=f({queryString:t,groupId:a}),[p,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,d.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),g=(()=>{const e=u??p;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),s(e),v(e)}),[s,v,i]),tabValues:i}}var g=t(2389);const h="tabList__CuJ",b="tabItem_LNqP";function y(e){let{className:n,block:t,selectedValue:l,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),c=e=>{const n=e.currentTarget,t=d.indexOf(n),a=s[t].value;a!==l&&(p(n),u(a))},m=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},s.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>d.push(e),onKeyDown:m,onClick:c},o,{className:(0,i.Z)("tabs__item",b,o?.className,{"tabs__item--active":l===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function x(e){const n=v(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",h)},r.createElement(y,(0,a.Z)({},e,n)),r.createElement(k,(0,a.Z)({},e,n)))}function T(e){const n=(0,g.Z)();return r.createElement(x,(0,a.Z)({key:String(n)},e))}},7331:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905)),i=t(4866),o=t(5162);const l={},u="DAP Core",s={unversionedId:"extras/dap/core",id:"extras/dap/core",title:"DAP Core",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/dap/core.md",sourceDirName:"extras/dap",slug:"/extras/dap/core",permalink:"/extras/dap/core",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/dap/core.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"yanky.nvim",permalink:"/extras/coding/yanky"},next:{title:"DAP Neovim Lua Adapter",permalink:"/extras/dap/nlua"}},d={},p=[{value:"nvim-dap",id:"nvim-dap",level:2},{value:"nvim-dap-ui",id:"nvim-dap-ui",level:2},{value:"nvim-dap-virtual-text",id:"nvim-dap-virtual-text",level:2},{value:"nvim-dap-ui",id:"nvim-dap-ui-1",level:2},{value:"nvim-nio",id:"nvim-nio",level:2},{value:"mason-nvim-dap.nvim",id:"mason-nvim-dapnvim",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dap-core"},"DAP Core"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"nvim-dap"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-dap"},"nvim-dap")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mfussenegger/nvim-dap",\n  recommended = true,\n  desc = "Debugging support. Requires language specific adapters to be configured. (see lang extras)",\n\n  dependencies = {\n    "rcarriga/nvim-dap-ui",\n    -- virtual text for the debugger\n    {\n      "theHamsta/nvim-dap-virtual-text",\n      opts = {},\n    },\n  },\n\n  -- stylua: ignore\n  keys = {\n    { "<leader>dB", function() require("dap").set_breakpoint(vim.fn.input(\'Breakpoint condition: \')) end, desc = "Breakpoint Condition" },\n    { "<leader>db", function() require("dap").toggle_breakpoint() end, desc = "Toggle Breakpoint" },\n    { "<leader>dc", function() require("dap").continue() end, desc = "Run/Continue" },\n    { "<leader>da", function() require("dap").continue({ before = get_args }) end, desc = "Run with Args" },\n    { "<leader>dC", function() require("dap").run_to_cursor() end, desc = "Run to Cursor" },\n    { "<leader>dg", function() require("dap").goto_() end, desc = "Go to Line (No Execute)" },\n    { "<leader>di", function() require("dap").step_into() end, desc = "Step Into" },\n    { "<leader>dj", function() require("dap").down() end, desc = "Down" },\n    { "<leader>dk", function() require("dap").up() end, desc = "Up" },\n    { "<leader>dl", function() require("dap").run_last() end, desc = "Run Last" },\n    { "<leader>do", function() require("dap").step_out() end, desc = "Step Out" },\n    { "<leader>dO", function() require("dap").step_over() end, desc = "Step Over" },\n    { "<leader>dP", function() require("dap").pause() end, desc = "Pause" },\n    { "<leader>dr", function() require("dap").repl.toggle() end, desc = "Toggle REPL" },\n    { "<leader>ds", function() require("dap").session() end, desc = "Session" },\n    { "<leader>dt", function() require("dap").terminate() end, desc = "Terminate" },\n    { "<leader>dw", function() require("dap.ui.widgets").hover() end, desc = "Widgets" },\n  },\n\n  config = function()\n    -- load mason-nvim-dap here, after all adapters have been setup\n    if LazyVim.has("mason-nvim-dap.nvim") then\n      require("mason-nvim-dap").setup(LazyVim.opts("mason-nvim-dap.nvim"))\n    end\n\n    vim.api.nvim_set_hl(0, "DapStoppedLine", { default = true, link = "Visual" })\n\n    for name, sign in pairs(LazyVim.config.icons.dap) do\n      sign = type(sign) == "table" and sign or { sign }\n      vim.fn.sign_define(\n        "Dap" .. name,\n        { text = sign[1], texthl = sign[2] or "DiagnosticInfo", linehl = sign[3], numhl = sign[3] }\n      )\n    end\n\n    -- setup dap config by VsCode launch.json file\n    local vscode = require("dap.ext.vscode")\n    local json = require("plenary.json")\n    vscode.json_decode = function(str)\n      return vim.json.decode(json.json_strip_comments(str))\n    end\n  end,\n}\n')))),(0,r.kt)("h2",{id:"nvim-dap-ui"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/rcarriga/nvim-dap-ui"},"nvim-dap-ui")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "rcarriga/nvim-dap-ui",\n  -- virtual text for the debugger\n  {\n    "theHamsta/nvim-dap-virtual-text",\n    opts = {},\n  },\n}\n')))),(0,r.kt)("h2",{id:"nvim-dap-virtual-text"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/theHamsta/nvim-dap-virtual-text"},"nvim-dap-virtual-text")),(0,r.kt)("p",null," virtual text for the debugger"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "theHamsta/nvim-dap-virtual-text",\n  opts = {},\n}\n')))),(0,r.kt)("h2",{id:"nvim-dap-ui-1"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/rcarriga/nvim-dap-ui"},"nvim-dap-ui")),(0,r.kt)("p",null," fancy UI for the debugger"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "rcarriga/nvim-dap-ui",\n  dependencies = { "nvim-neotest/nvim-nio" },\n  -- stylua: ignore\n  keys = {\n    { "<leader>du", function() require("dapui").toggle({ }) end, desc = "Dap UI" },\n    { "<leader>de", function() require("dapui").eval() end, desc = "Eval", mode = {"n", "x"} },\n  },\n  opts = {},\n  config = function(_, opts)\n    local dap = require("dap")\n    local dapui = require("dapui")\n    dapui.setup(opts)\n    dap.listeners.after.event_initialized["dapui_config"] = function()\n      dapui.open({})\n    end\n    dap.listeners.before.event_terminated["dapui_config"] = function()\n      dapui.close({})\n    end\n    dap.listeners.before.event_exited["dapui_config"] = function()\n      dapui.close({})\n    end\n  end,\n}\n')))),(0,r.kt)("h2",{id:"nvim-nio"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neotest/nvim-nio"},"nvim-nio")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{ "nvim-neotest/nvim-nio" }\n')))),(0,r.kt)("h2",{id:"mason-nvim-dapnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/jay-babu/mason-nvim-dap.nvim"},"mason-nvim-dap.nvim")),(0,r.kt)("p",null," mason.nvim integration"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {\n  -- Makes a best effort to setup the various debuggers with\n  -- reasonable debug configurations\n  automatic_installation = true,\n\n  -- You can provide additional configuration to the handlers,\n  -- see mason-nvim-dap README for more information\n  handlers = {},\n\n  -- You'll need to check that you have the required things installed\n  -- online, please don't ask me how to install them :)\n  ensure_installed = {\n    -- Update this to ensure that you have the debuggers for the langs you want\n  },\n}\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "jay-babu/mason-nvim-dap.nvim",\n  dependencies = "mason.nvim",\n  cmd = { "DapInstall", "DapUninstall" },\n  opts = {\n    -- Makes a best effort to setup the various debuggers with\n    -- reasonable debug configurations\n    automatic_installation = true,\n\n    -- You can provide additional configuration to the handlers,\n    -- see mason-nvim-dap README for more information\n    handlers = {},\n\n    -- You\'ll need to check that you have the required things installed\n    -- online, please don\'t ask me how to install them :)\n    ensure_installed = {\n      -- Update this to ensure that you have the debuggers for the langs you want\n    },\n  },\n  -- mason-nvim-dap is loaded when nvim-dap loads\n  config = function() end,\n}\n')))))}m.isMDXComponent=!0}}]);