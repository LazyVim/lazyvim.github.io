"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[6609],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(7294),a=t(6010);const i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(7462),a=t(7294),i=t(6010),o=t(2466),s=t(6550),c=t(1980),l=t(7392),u=t(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function k(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=p(e),[o,s]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[c,l]=f({queryString:t,groupId:r}),[d,k]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,u.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),y=(()=>{const e=c??d;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),k(e)}),[l,k,i]),tabValues:i}}var y=t(2389);const g="tabList__CuJ",b="tabItem_LNqP";function v(e){let{className:n,block:t,selectedValue:s,selectValue:c,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const n=e.currentTarget,t=u.indexOf(n),r=l[t].value;r!==s&&(d(n),c(r))},m=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},l.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,i.Z)("tabs__item",b,o?.className,{"tabs__item--active":s===n})}),t??n)})))}function h(e){let{lazy:n,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function S(e){const n=k(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",g)},a.createElement(v,(0,r.Z)({},e,n)),a.createElement(h,(0,r.Z)({},e,n)))}function w(e){const n=(0,y.Z)();return a.createElement(S,(0,r.Z)({key:String(n)},e))}},6045:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905)),i=t(4866),o=t(5162);const s={},c="Snacks_picker",l={unversionedId:"extras/editor/snacks_picker",id:"extras/editor/snacks_picker",title:"Snacks_picker",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/editor/snacks_picker.md",sourceDirName:"extras/editor",slug:"/extras/editor/snacks_picker",permalink:"/extras/editor/snacks_picker",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/editor/snacks_picker.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Refactoring",permalink:"/extras/editor/refactoring"},next:{title:"Telescope",permalink:"/extras/editor/telescope"}},u={},d=[{value:"Options",id:"options",level:3},{value:"snacks.nvim",id:"snacksnvim",level:2},{value:"snacks.nvim",id:"snacksnvim-1",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"todo-comments.nvim <em>(optional)</em>",id:"todo-commentsnvim-optional",level:2}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"snacks_picker"},(0,a.kt)("inlineCode",{parentName:"h1"},"Snacks_picker")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,a.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,a.kt)("h3",{id:"options"},"Options"),(0,a.kt)("p",null,"Additional options for this extra can be configured in your ",(0,a.kt)("a",{parentName:"p",href:"/configuration/general#options"},"lua/config/options.lua")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/options.lua"',title:'"lua/config/options.lua"'},'-- In case you don\'t want to use `:LazyExtras`,\n-- then you need to set the option below.\nvim.g.lazyvim_picker = "snacks"\n')),(0,a.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,a.kt)("h2",{id:"snacksnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/snacks.nvim"},"snacks.nvim")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  picker = {\n    win = {\n      input = {\n        keys = {\n          ["<a-c>"] = {\n            "toggle_cwd",\n            mode = { "n", "i" },\n          },\n        },\n      },\n    },\n    actions = {\n      ---@param p snacks.Picker\n      toggle_cwd = function(p)\n        local root = LazyVim.root({ buf = p.input.filter.current_buf, normalize = true })\n        local cwd = vim.fs.normalize((vim.uv or vim.loop).cwd() or ".")\n        local current = p:cwd()\n        p:set_cwd(current == root and cwd or root)\n        p:find()\n      end,\n    },\n  },\n}\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/snacks.nvim",\n  opts = {\n    picker = {\n      win = {\n        input = {\n          keys = {\n            ["<a-c>"] = {\n              "toggle_cwd",\n              mode = { "n", "i" },\n            },\n          },\n        },\n      },\n      actions = {\n        ---@param p snacks.Picker\n        toggle_cwd = function(p)\n          local root = LazyVim.root({ buf = p.input.filter.current_buf, normalize = true })\n          local cwd = vim.fs.normalize((vim.uv or vim.loop).cwd() or ".")\n          local current = p:cwd()\n          p:set_cwd(current == root and cwd or root)\n          p:find()\n        end,\n      },\n    },\n  },\n  -- stylua: ignore\n  keys = {\n    { "<leader>,", function() Snacks.picker.buffers() end, desc = "Buffers" },\n    { "<leader>/", LazyVim.pick("grep"), desc = "Grep (Root Dir)" },\n    { "<leader>:", function() Snacks.picker.command_history() end, desc = "Command History" },\n    { "<leader><space>", LazyVim.pick("files"), desc = "Find Files (Root Dir)" },\n    -- find\n    { "<leader>fb", function() Snacks.picker.buffers() end, desc = "Buffers" },\n    { "<leader>fB", function() Snacks.picker.buffers({ hidden = true, nofile = true }) end, desc = "Buffers (all)" },\n    { "<leader>fc", LazyVim.pick.config_files(), desc = "Find Config File" },\n    { "<leader>ff", LazyVim.pick("files"), desc = "Find Files (Root Dir)" },\n    { "<leader>fF", LazyVim.pick("files", { root = false }), desc = "Find Files (cwd)" },\n    { "<leader>fg", function() Snacks.picker.git_files() end, desc = "Find Files (git-files)" },\n    { "<leader>fr", LazyVim.pick("oldfiles"), desc = "Recent" },\n    { "<leader>fR", LazyVim.pick("oldfiles", { filter = { cwd = true }}), desc = "Recent (cwd)" },\n    { "<leader>fp", function() Snacks.picker.projects() end, desc = "Projects" },\n    -- git\n    { "<leader>gc", function() Snacks.picker.git_log() end, desc = "Git Log" },\n    { "<leader>gd", function() Snacks.picker.git_diff() end, desc = "Git Diff (hunks)" },\n    { "<leader>gs", function() Snacks.picker.git_status() end, desc = "Git Status" },\n    -- Grep\n    { "<leader>sb", function() Snacks.picker.lines() end, desc = "Buffer Lines" },\n    { "<leader>sB", function() Snacks.picker.grep_buffers() end, desc = "Grep Open Buffers" },\n    { "<leader>sg", LazyVim.pick("live_grep"), desc = "Grep (Root Dir)" },\n    { "<leader>sG", LazyVim.pick("live_grep", { root = false }), desc = "Grep (cwd)" },\n    { "<leader>sp", function() Snacks.picker.lazy() end, desc = "Search for Plugin Spec" },\n    { "<leader>sw", LazyVim.pick("grep_word"), desc = "Visual selection or word (Root Dir)", mode = { "n", "x" } },\n    { "<leader>sW", LazyVim.pick("grep_word", { root = false }), desc = "Visual selection or word (cwd)", mode = { "n", "x" } },\n    -- search\n    { \'<leader>s"\', function() Snacks.picker.registers() end, desc = "Registers" },\n    { "<leader>sa", function() Snacks.picker.autocmds() end, desc = "Autocmds" },\n    { "<leader>sc", function() Snacks.picker.command_history() end, desc = "Command History" },\n    { "<leader>sC", function() Snacks.picker.commands() end, desc = "Commands" },\n    { "<leader>sd", function() Snacks.picker.diagnostics() end, desc = "Diagnostics" },\n    { "<leader>sh", function() Snacks.picker.help() end, desc = "Help Pages" },\n    { "<leader>sH", function() Snacks.picker.highlights() end, desc = "Highlights" },\n    { "<leader>si", function() Snacks.picker.icons() end, desc = "Icons" },\n    { "<leader>sj", function() Snacks.picker.jumps() end, desc = "Jumps" },\n    { "<leader>sk", function() Snacks.picker.keymaps() end, desc = "Keymaps" },\n    { "<leader>sl", function() Snacks.picker.loclist() end, desc = "Location List" },\n    { "<leader>sM", function() Snacks.picker.man() end, desc = "Man Pages" },\n    { "<leader>sm", function() Snacks.picker.marks() end, desc = "Marks" },\n    { "<leader>sR", function() Snacks.picker.resume() end, desc = "Resume" },\n    { "<leader>sq", function() Snacks.picker.qflist() end, desc = "Quickfix List" },\n    { "<leader>su", function() Snacks.picker.undo() end, desc = "Undotree" },\n    -- ui\n    { "<leader>uC", function() Snacks.picker.colorschemes() end, desc = "Colorschemes" },\n  },\n}\n')))),(0,a.kt)("h2",{id:"snacksnvim-1"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/snacks.nvim"},"snacks.nvim")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  if LazyVim.has("trouble.nvim") then\n    return vim.tbl_deep_extend("force", opts or {}, {\n      picker = {\n        actions = require("trouble.sources.snacks").actions,\n        win = {\n          input = {\n            keys = {\n              ["<c-t>"] = {\n                "trouble_open",\n                mode = { "n", "i" },\n              },\n            },\n          },\n        },\n      },\n    })\n  end\nend\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/snacks.nvim",\n  opts = function(_, opts)\n    if LazyVim.has("trouble.nvim") then\n      return vim.tbl_deep_extend("force", opts or {}, {\n        picker = {\n          actions = require("trouble.sources.snacks").actions,\n          win = {\n            input = {\n              keys = {\n                ["<c-t>"] = {\n                  "trouble_open",\n                  mode = { "n", "i" },\n                },\n              },\n            },\n          },\n        },\n      })\n    end\n  end,\n}\n')))),(0,a.kt)("h2",{id:"nvim-lspconfig"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  if LazyVim.pick.want() ~= "snacks" then\n    return\n  end\n  local Keys = require("lazyvim.plugins.lsp.keymaps").get()\n  -- stylua: ignore\n  vim.list_extend(Keys, {\n    { "gd", function() Snacks.picker.lsp_definitions() end, desc = "Goto Definition", has = "definition" },\n    { "gr", function() Snacks.picker.lsp_references() end, nowait = true, desc = "References" },\n    { "gI", function() Snacks.picker.lsp_implementations() end, desc = "Goto Implementation" },\n    { "gy", function() Snacks.picker.lsp_type_definitions() end, desc = "Goto T[y]pe Definition" },\n    { "<leader>ss", function() Snacks.picker.lsp_symbols({ filter = LazyVim.config.kind_filter }) end, desc = "LSP Symbols", has = "documentSymbol" },\n    { "<leader>sS", function() Snacks.picker.lsp_workspace_symbols({ filter = LazyVim.config.kind_filter }) end, desc = "LSP Workspace Symbols", has = "workspace/symbols" },\n  })\nend\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = function()\n    if LazyVim.pick.want() ~= "snacks" then\n      return\n    end\n    local Keys = require("lazyvim.plugins.lsp.keymaps").get()\n    -- stylua: ignore\n    vim.list_extend(Keys, {\n      { "gd", function() Snacks.picker.lsp_definitions() end, desc = "Goto Definition", has = "definition" },\n      { "gr", function() Snacks.picker.lsp_references() end, nowait = true, desc = "References" },\n      { "gI", function() Snacks.picker.lsp_implementations() end, desc = "Goto Implementation" },\n      { "gy", function() Snacks.picker.lsp_type_definitions() end, desc = "Goto T[y]pe Definition" },\n      { "<leader>ss", function() Snacks.picker.lsp_symbols({ filter = LazyVim.config.kind_filter }) end, desc = "LSP Symbols", has = "documentSymbol" },\n      { "<leader>sS", function() Snacks.picker.lsp_workspace_symbols({ filter = LazyVim.config.kind_filter }) end, desc = "LSP Workspace Symbols", has = "workspace/symbols" },\n    })\n  end,\n}\n')))),(0,a.kt)("h2",{id:"todo-commentsnvim-optional"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/todo-comments.nvim"},"todo-comments.nvim")," ",(0,a.kt)("em",{parentName:"h2"},"(optional)")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/todo-comments.nvim",\n  optional = true,\n  -- stylua: ignore\n  keys = {\n    { "<leader>st", function() Snacks.picker.todo_comments() end, desc = "Todo" },\n    { "<leader>sT", function () Snacks.picker.todo_comments({ keywords = { "TODO", "FIX", "FIXME" } }) end, desc = "Todo/Fix/Fixme" },\n  },\n}\n')))))}m.isMDXComponent=!0}}]);