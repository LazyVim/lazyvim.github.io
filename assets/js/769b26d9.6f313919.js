"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[1969],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),u=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return t?a.createElement(b,s(s({ref:n},c),{},{components:t})):a.createElement(b,s({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=m;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var u=2;u<l;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),r=t(6010);const l="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var a=t(7462),r=t(7294),l=t(6010),s=t(2466),o=t(6550),i=t(1980),u=t(7392),c=t(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=d(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l}))),[i,u]=b({queryString:t,groupId:a}),[p,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),v=(()=>{const e=i??p;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{v&&o(v)}),[v]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var v=t(2389);const g="tabList__CuJ",y="tabItem_LNqP";function h(e){let{className:n,block:t,selectedValue:o,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==o&&(p(n),i(a))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>c.push(e),onKeyDown:m,onClick:d},s,{className:(0,l.Z)("tabs__item",y,s?.className,{"tabs__item--active":o===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function T(e){const n=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",g)},r.createElement(h,(0,a.Z)({},e,n)),r.createElement(k,(0,a.Z)({},e,n)))}function x(e){const n=(0,v.Z)();return r.createElement(T,(0,a.Z)({key:String(n)},e))}},1452:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=t(7462),r=(t(7294),t(3905)),l=t(4866),s=t(5162);const o={},i="Rust",u={unversionedId:"extras/lang/rust",id:"extras/lang/rust",title:"Rust",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/lang/rust.md",sourceDirName:"extras/lang",slug:"/extras/lang/rust",permalink:"/extras/lang/rust",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/lang/rust.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ruby",permalink:"/extras/lang/ruby"},next:{title:"Scala",permalink:"/extras/lang/scala"}},c={},p=[{value:"Options",id:"options",level:3},{value:"crates.nvim",id:"cratesnvim",level:2},{value:"nvim-treesitter",id:"nvim-treesitter",level:2},{value:"rustaceanvim",id:"rustaceanvim",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"mason.nvim <em>(optional)</em>",id:"masonnvim-optional",level:2},{value:"neotest <em>(optional)</em>",id:"neotest-optional",level:2}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rust"},"Rust"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("p",null,"Additional options for this extra can be configured in your ",(0,r.kt)("a",{parentName:"p",href:"/configuration/general#options"},"lua/config/options.lua")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/options.lua"',title:'"lua/config/options.lua"'},'-- LSP Server to use for Rust.\n-- Set to "bacon-ls" to use bacon-ls instead of rust-analyzer.\n-- only for diagnostics. The rest of LSP support will still be\n-- provided by rust-analyzer.\nvim.g.lazyvim_rust_diagnostics = "rust-analyzer"\n')),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"cratesnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/Saecki/crates.nvim"},"crates.nvim")),(0,r.kt)("p",null," LSP for Cargo.toml"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {\n  completion = {\n    crates = {\n      enabled = true,\n    },\n  },\n  lsp = {\n    enabled = true,\n    actions = true,\n    completion = true,\n    hover = true,\n  },\n}\n"))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "Saecki/crates.nvim",\n  event = { "BufRead Cargo.toml" },\n  opts = {\n    completion = {\n      crates = {\n        enabled = true,\n      },\n    },\n    lsp = {\n      enabled = true,\n      actions = true,\n      completion = true,\n      hover = true,\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"nvim-treesitter"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter"},"nvim-treesitter")),(0,r.kt)("p",null," Add Rust & related to treesitter"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = { ensure_installed = { "rust", "ron" } }\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter",\n  opts = { ensure_installed = { "rust", "ron" } },\n}\n')))),(0,r.kt)("h2",{id:"rustaceanvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mrcjkb/rustaceanvim"},"rustaceanvim")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  server = {\n    on_attach = function(_, bufnr)\n      vim.keymap.set("n", "<leader>cR", function()\n        vim.cmd.RustLsp("codeAction")\n      end, { desc = "Code Action", buffer = bufnr })\n      vim.keymap.set("n", "<leader>dr", function()\n        vim.cmd.RustLsp("debuggables")\n      end, { desc = "Rust Debuggables", buffer = bufnr })\n    end,\n    default_settings = {\n      -- rust-analyzer language server configuration\n      ["rust-analyzer"] = {\n        cargo = {\n          allFeatures = true,\n          loadOutDirsFromCheck = true,\n          buildScripts = {\n            enable = true,\n          },\n        },\n        -- Add clippy lints for Rust if using rust-analyzer\n        checkOnSave = diagnostics == "rust-analyzer",\n        -- Enable diagnostics if using rust-analyzer\n        diagnostics = {\n          enable = diagnostics == "rust-analyzer",\n        },\n        procMacro = {\n          enable = true,\n          ignored = {\n            ["async-trait"] = { "async_trait" },\n            ["napi-derive"] = { "napi" },\n            ["async-recursion"] = { "async_recursion" },\n          },\n        },\n        files = {\n          excludeDirs = {\n            ".direnv",\n            ".git",\n            ".github",\n            ".gitlab",\n            "bin",\n            "node_modules",\n            "target",\n            "venv",\n            ".venv",\n          },\n        },\n      },\n    },\n  },\n}\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mrcjkb/rustaceanvim",\n  version = vim.fn.has("nvim-0.10.0") == 0 and "^4" or false,\n  ft = { "rust" },\n  opts = {\n    server = {\n      on_attach = function(_, bufnr)\n        vim.keymap.set("n", "<leader>cR", function()\n          vim.cmd.RustLsp("codeAction")\n        end, { desc = "Code Action", buffer = bufnr })\n        vim.keymap.set("n", "<leader>dr", function()\n          vim.cmd.RustLsp("debuggables")\n        end, { desc = "Rust Debuggables", buffer = bufnr })\n      end,\n      default_settings = {\n        -- rust-analyzer language server configuration\n        ["rust-analyzer"] = {\n          cargo = {\n            allFeatures = true,\n            loadOutDirsFromCheck = true,\n            buildScripts = {\n              enable = true,\n            },\n          },\n          -- Add clippy lints for Rust if using rust-analyzer\n          checkOnSave = diagnostics == "rust-analyzer",\n          -- Enable diagnostics if using rust-analyzer\n          diagnostics = {\n            enable = diagnostics == "rust-analyzer",\n          },\n          procMacro = {\n            enable = true,\n            ignored = {\n              ["async-trait"] = { "async_trait" },\n              ["napi-derive"] = { "napi" },\n              ["async-recursion"] = { "async_recursion" },\n            },\n          },\n          files = {\n            excludeDirs = {\n              ".direnv",\n              ".git",\n              ".github",\n              ".gitlab",\n              "bin",\n              "node_modules",\n              "target",\n              "venv",\n              ".venv",\n            },\n          },\n        },\n      },\n    },\n  },\n  config = function(_, opts)\n    if LazyVim.has("mason.nvim") then\n      local package_path = require("mason-registry").get_package("codelldb"):get_install_path()\n      local codelldb = package_path .. "/extension/adapter/codelldb"\n      local library_path = package_path .. "/extension/lldb/lib/liblldb.dylib"\n      local uname = io.popen("uname"):read("*l")\n      if uname == "Linux" then\n        library_path = package_path .. "/extension/lldb/lib/liblldb.so"\n      end\n      opts.dap = {\n        adapter = require("rustaceanvim.config").get_codelldb_adapter(codelldb, library_path),\n      }\n    end\n    vim.g.rustaceanvim = vim.tbl_deep_extend("keep", vim.g.rustaceanvim or {}, opts or {})\n    if vim.fn.executable("rust-analyzer") == 0 then\n      LazyVim.error(\n        "**rust-analyzer** not found in PATH, please install it.\\nhttps://rust-analyzer.github.io/",\n        { title = "rustaceanvim" }\n      )\n    end\n  end,\n}\n')))),(0,r.kt)("h2",{id:"nvim-lspconfig"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,r.kt)("p",null," Correctly setup lspconfig for Rust \ud83d\ude80"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  servers = {\n    bacon_ls = {\n      enabled = diagnostics == "bacon-ls",\n    },\n    rust_analyzer = { enabled = false },\n  },\n}\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      bacon_ls = {\n        enabled = diagnostics == "bacon-ls",\n      },\n      rust_analyzer = { enabled = false },\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"masonnvim-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)("p",null," Ensure Rust debugger is installed"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  opts.ensure_installed = opts.ensure_installed or {}\n  vim.list_extend(opts.ensure_installed, { "codelldb" })\n  if diagnostics == "bacon-ls" then\n    vim.list_extend(opts.ensure_installed, { "bacon" })\n  end\nend\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mason-org/mason.nvim",\n  optional = true,\n  opts = function(_, opts)\n    opts.ensure_installed = opts.ensure_installed or {}\n    vim.list_extend(opts.ensure_installed, { "codelldb" })\n    if diagnostics == "bacon-ls" then\n      vim.list_extend(opts.ensure_installed, { "bacon" })\n    end\n  end,\n}\n')))),(0,r.kt)("h2",{id:"neotest-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neotest/neotest"},"neotest")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  adapters = {\n    ["rustaceanvim.neotest"] = {},\n  },\n}\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-neotest/neotest",\n  optional = true,\n  opts = {\n    adapters = {\n      ["rustaceanvim.neotest"] = {},\n    },\n  },\n}\n')))))}m.isMDXComponent=!0}}]);