"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[2228],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,b=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(b,i(i({ref:n},c),{},{components:t})):a.createElement(b,i({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var a=t(7462),r=t(7294),o=t(6010),i=t(2466),l=t(6550),s=t(1980),p=t(7392),c=t(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,p.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function k(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=m(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,p]=b({queryString:t,groupId:a}),[u,k]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),f=(()=>{const e=s??u;return d({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),k(e)}),[p,k,o]),tabValues:o}}var f=t(2389);const h="tabList__CuJ",g="tabItem_LNqP";function v(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),a=p[t].value;a!==l&&(u(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:m},i,{className:(0,o.Z)("tabs__item",g,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function _(e){const n=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h)},r.createElement(v,(0,a.Z)({},e,n)),r.createElement(y,(0,a.Z)({},e,n)))}function x(e){const n=(0,f.Z)();return r.createElement(_,(0,a.Z)({key:String(n)},e))}},5478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=t(7462),r=(t(7294),t(3905)),o=t(4866),i=t(5162);const l={},s="Blink",p={unversionedId:"extras/coding/blink",id:"extras/coding/blink",title:"Blink",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/coding/blink.md",sourceDirName:"extras/coding",slug:"/extras/coding/blink",permalink:"/extras/coding/blink",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/coding/blink.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tabnine",permalink:"/extras/ai/tabnine"},next:{title:"Luasnip",permalink:"/extras/coding/luasnip"}},c={},u=[{value:"Options",id:"options",level:3},{value:"blink.cmp",id:"blinkcmp",level:2},{value:"friendly-snippets",id:"friendly-snippets",level:2},{value:"blink.cmp",id:"blinkcmp-1",level:2},{value:"blink.cmp",id:"blinkcmp-2",level:2},{value:"blink.compat <em>(optional)</em>",id:"blinkcompat-optional",level:2},{value:"catppuccin <em>(optional)</em>",id:"catppuccin-optional",level:2}],m={toc:u};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blink"},(0,r.kt)("inlineCode",{parentName:"h1"},"Blink")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("p",null,"Additional options for this extra can be configured in your ",(0,r.kt)("a",{parentName:"p",href:"/configuration/general#options"},"lua/config/options.lua")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/options.lua"',title:'"lua/config/options.lua"'},"-- set to `true` to follow the main branch\n-- you need to have a working rust toolchain to build the plugin\n-- in this case.\nvim.g.lazyvim_blink_main = false\n")),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"blinkcmp"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.cmp"},"blink.cmp")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  snippets = {\n    expand = function(snippet, _)\n      return LazyVim.cmp.expand(snippet)\n    end,\n  },\n  appearance = {\n    -- sets the fallback highlight groups to nvim-cmp\'s highlight groups\n    -- useful for when your theme doesn\'t support blink.cmp\n    -- will be removed in a future release, assuming themes add support\n    use_nvim_cmp_as_default = false,\n    -- set to \'mono\' for \'Nerd Font Mono\' or \'normal\' for \'Nerd Font\'\n    -- adjusts spacing to ensure icons are aligned\n    nerd_font_variant = "mono",\n  },\n  completion = {\n    accept = {\n      -- experimental auto-brackets support\n      auto_brackets = {\n        enabled = true,\n      },\n    },\n    menu = {\n      draw = {\n        treesitter = { "lsp" },\n      },\n    },\n    documentation = {\n      auto_show = true,\n      auto_show_delay_ms = 200,\n    },\n    ghost_text = {\n      enabled = vim.g.ai_cmp,\n    },\n  },\n\n  -- experimental signature help support\n  -- signature = { enabled = true },\n\n  sources = {\n    -- adding any nvim-cmp sources here will enable them\n    -- with blink.compat\n    compat = {},\n    default = { "lsp", "path", "snippets", "buffer" },\n  },\n\n  cmdline = {\n    enabled = false,\n  },\n\n  keymap = {\n    preset = "enter",\n    ["<C-y>"] = { "select_and_accept" },\n  },\n}\n'))),(0,r.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.cmp",\n  version = not vim.g.lazyvim_blink_main and "*",\n  build = vim.g.lazyvim_blink_main and "cargo build --release",\n  opts_extend = {\n    "sources.completion.enabled_providers",\n    "sources.compat",\n    "sources.default",\n  },\n  dependencies = {\n    "rafamadriz/friendly-snippets",\n    -- add blink.compat to dependencies\n    {\n      "saghen/blink.compat",\n      optional = true, -- make optional so it\'s only enabled if any extras need it\n      opts = {},\n      version = not vim.g.lazyvim_blink_main and "*",\n    },\n  },\n  event = "InsertEnter",\n\n  ---@module \'blink.cmp\'\n  ---@type blink.cmp.Config\n  opts = {\n    snippets = {\n      expand = function(snippet, _)\n        return LazyVim.cmp.expand(snippet)\n      end,\n    },\n    appearance = {\n      -- sets the fallback highlight groups to nvim-cmp\'s highlight groups\n      -- useful for when your theme doesn\'t support blink.cmp\n      -- will be removed in a future release, assuming themes add support\n      use_nvim_cmp_as_default = false,\n      -- set to \'mono\' for \'Nerd Font Mono\' or \'normal\' for \'Nerd Font\'\n      -- adjusts spacing to ensure icons are aligned\n      nerd_font_variant = "mono",\n    },\n    completion = {\n      accept = {\n        -- experimental auto-brackets support\n        auto_brackets = {\n          enabled = true,\n        },\n      },\n      menu = {\n        draw = {\n          treesitter = { "lsp" },\n        },\n      },\n      documentation = {\n        auto_show = true,\n        auto_show_delay_ms = 200,\n      },\n      ghost_text = {\n        enabled = vim.g.ai_cmp,\n      },\n    },\n\n    -- experimental signature help support\n    -- signature = { enabled = true },\n\n    sources = {\n      -- adding any nvim-cmp sources here will enable them\n      -- with blink.compat\n      compat = {},\n      default = { "lsp", "path", "snippets", "buffer" },\n    },\n\n    cmdline = {\n      enabled = false,\n    },\n\n    keymap = {\n      preset = "enter",\n      ["<C-y>"] = { "select_and_accept" },\n    },\n  },\n  ---@param opts blink.cmp.Config | { sources: { compat: string[] } }\n  config = function(_, opts)\n    -- setup compat sources\n    local enabled = opts.sources.default\n    for _, source in ipairs(opts.sources.compat or {}) do\n      opts.sources.providers[source] = vim.tbl_deep_extend(\n        "force",\n        { name = source, module = "blink.compat.source" },\n        opts.sources.providers[source] or {}\n      )\n      if type(enabled) == "table" and not vim.tbl_contains(enabled, source) then\n        table.insert(enabled, source)\n      end\n    end\n\n    -- add ai_accept to <Tab> key\n    if not opts.keymap["<Tab>"] then\n      if opts.keymap.preset == "super-tab" then -- super-tab\n        opts.keymap["<Tab>"] = {\n          require("blink.cmp.keymap.presets").get("super-tab")["<Tab>"][1],\n          LazyVim.cmp.map({ "snippet_forward", "ai_accept" }),\n          "fallback",\n        }\n      else -- other presets\n        opts.keymap["<Tab>"] = {\n          LazyVim.cmp.map({ "snippet_forward", "ai_accept" }),\n          "fallback",\n        }\n      end\n    end\n\n    -- Unset custom prop to pass blink.cmp validation\n    opts.sources.compat = nil\n\n    -- check if we need to override symbol kinds\n    for _, provider in pairs(opts.sources.providers or {}) do\n      ---@cast provider blink.cmp.SourceProviderConfig|{kind?:string}\n      if provider.kind then\n        local CompletionItemKind = require("blink.cmp.types").CompletionItemKind\n        local kind_idx = #CompletionItemKind + 1\n\n        CompletionItemKind[kind_idx] = provider.kind\n        ---@diagnostic disable-next-line: no-unknown\n        CompletionItemKind[provider.kind] = kind_idx\n\n        ---@type fun(ctx: blink.cmp.Context, items: blink.cmp.CompletionItem[]): blink.cmp.CompletionItem[]\n        local transform_items = provider.transform_items\n        ---@param ctx blink.cmp.Context\n        ---@param items blink.cmp.CompletionItem[]\n        provider.transform_items = function(ctx, items)\n          items = transform_items and transform_items(ctx, items) or items\n          for _, item in ipairs(items) do\n            item.kind = kind_idx or item.kind\n            item.kind_icon = LazyVim.config.icons.kinds[item.kind_name] or item.kind_icon or nil\n          end\n          return items\n        end\n\n        -- Unset custom prop to pass blink.cmp validation\n        provider.kind = nil\n      end\n    end\n\n    require("blink.cmp").setup(opts)\n  end,\n}\n')))),(0,r.kt)("h2",{id:"friendly-snippets"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/rafamadriz/friendly-snippets"},"friendly-snippets")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,r.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "rafamadriz/friendly-snippets",\n  -- add blink.compat to dependencies\n  {\n    "saghen/blink.compat",\n    optional = true, -- make optional so it\'s only enabled if any extras need it\n    opts = {},\n    version = not vim.g.lazyvim_blink_main and "*",\n  },\n}\n')))),(0,r.kt)("h2",{id:"blinkcmp-1"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.cmp"},"blink.cmp")),(0,r.kt)("p",null," add icons"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  opts.appearance = opts.appearance or {}\n  opts.appearance.kind_icons = vim.tbl_extend("force", opts.appearance.kind_icons or {}, LazyVim.config.icons.kinds)\nend\n'))),(0,r.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.cmp",\n  opts = function(_, opts)\n    opts.appearance = opts.appearance or {}\n    opts.appearance.kind_icons = vim.tbl_extend("force", opts.appearance.kind_icons or {}, LazyVim.config.icons.kinds)\n  end,\n}\n')))),(0,r.kt)("h2",{id:"blinkcmp-2"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.cmp"},"blink.cmp")),(0,r.kt)("p",null," lazydev"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  sources = {\n    -- add lazydev to your completion providers\n    default = { "lazydev" },\n    providers = {\n      lazydev = {\n        name = "LazyDev",\n        module = "lazydev.integrations.blink",\n        score_offset = 100, -- show at a higher priority than lsp\n      },\n    },\n  },\n}\n'))),(0,r.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.cmp",\n  opts = {\n    sources = {\n      -- add lazydev to your completion providers\n      default = { "lazydev" },\n      providers = {\n        lazydev = {\n          name = "LazyDev",\n          module = "lazydev.integrations.blink",\n          score_offset = 100, -- show at a higher priority than lsp\n        },\n      },\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"blinkcompat-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.compat"},"blink.compat")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)("p",null," add blink.compat to dependencies"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.compat",\n  optional = true, -- make optional so it\'s only enabled if any extras need it\n  opts = {},\n  version = not vim.g.lazyvim_blink_main and "*",\n}\n')))),(0,r.kt)("h2",{id:"catppuccin-optional"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/catppuccin/nvim"},"catppuccin")," ",(0,r.kt)("em",{parentName:"h2"},"(optional)")),(0,r.kt)("p",null," catppuccin support"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {\n  integrations = { blink_cmp = true },\n}\n"))),(0,r.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "catppuccin",\n  optional = true,\n  opts = {\n    integrations = { blink_cmp = true },\n  },\n}\n')))))}d.isMDXComponent=!0}}]);