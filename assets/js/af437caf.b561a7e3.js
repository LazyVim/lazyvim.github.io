"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[5200],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),c=o,f=d["".concat(s,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,r[1]=i;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),o=n(6010);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,r),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(7462),o=n(7294),l=n(6010),r=n(2466),i=n(6550),s=n(1980),u=n(7392),p=n(12);function d(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function m(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,o.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[r,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,u]=f({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,p.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),v=(()=>{const e=s??d;return c({value:e,tabValues:l})?e:null})();(0,o.useLayoutEffect)((()=>{v&&i(v)}),[v]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),b(e)}),[u,b,l]),tabValues:l}}var v=n(2389);const g="tabList__CuJ",h="tabItem_LNqP";function k(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==i&&(d(t),s(a))},c=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:c,onClick:m},r,{className:(0,l.Z)("tabs__item",h,r?.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function _(e){const t=b(e);return o.createElement("div",{className:(0,l.Z)("tabs-container",g)},o.createElement(k,(0,a.Z)({},e,t)),o.createElement(y,(0,a.Z)({},e,t)))}function T(e){const t=(0,v.Z)();return o.createElement(_,(0,a.Z)({key:String(t)},e))}},9043:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=n(7462),o=(n(7294),n(3905)),l=n(4866),r=n(5162);const i={},s="Sql",u={unversionedId:"extras/lang/sql",id:"extras/lang/sql",title:"Sql",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/lang/sql.md",sourceDirName:"extras/lang",slug:"/extras/lang/sql",permalink:"/extras/lang/sql",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/lang/sql.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scala",permalink:"/extras/lang/scala"},next:{title:"Svelte",permalink:"/extras/lang/svelte"}},p={},d=[{value:"Options",id:"options",level:3},{value:"vim-dadbod",id:"vim-dadbod",level:2},{value:"vim-dadbod-completion",id:"vim-dadbod-completion",level:2},{value:"vim-dadbod-ui",id:"vim-dadbod-ui",level:2},{value:"vim-dadbod-completion",id:"vim-dadbod-completion-1",level:2},{value:"mason.nvim",id:"masonnvim",level:2},{value:"nvim-treesitter <em>(optional)</em>",id:"nvim-treesitter-optional",level:2},{value:"edgy.nvim <em>(optional)</em>",id:"edgynvim-optional",level:2},{value:"blink.cmp <em>(optional)</em>",id:"blinkcmp-optional",level:2},{value:"nvim-lint <em>(optional)</em>",id:"nvim-lint-optional",level:2},{value:"conform.nvim <em>(optional)</em>",id:"conformnvim-optional",level:2}],m={toc:d};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sql"},(0,o.kt)("inlineCode",{parentName:"h1"},"Sql")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,o.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("p",null,"Additional options for this extra can be configured in your ",(0,o.kt)("a",{parentName:"p",href:"/configuration/general#options"},"lua/config/options.lua")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/options.lua"',title:'"lua/config/options.lua"'},'-- The setup below will automatically configure connections without the need for manual input each time.\n\n-- Example configuration using dictionary with keys:\n--    vim.g.dbs = {\n--      dev = "Replace with your database connection URL.",\n--      staging = "Replace with your database connection URL.",\n--    }\n-- or\n-- Example configuration using a list of dictionaries:\n--    vim.g.dbs = {\n--      { name = "dev", url = "Replace with your database connection URL." },\n--      { name = "staging", url = "Replace with your database connection URL." },\n--    }\n\n-- or\n-- Create a `.lazy.lua` file in your project and set your connections like this:\n-- ```lua\n--    vim.g.dbs = {...}\n--\n--    return {}\n-- ```\n\n-- Alternatively, you can also use other methods to inject your environment variables.\n\n-- Finally, please make sure to add `.lazy.lua` to your `.gitignore` file to protect your secrets.\n')),(0,o.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,o.kt)("h2",{id:"vim-dadbod"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/tpope/vim-dadbod"},"vim-dadbod")),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "tpope/vim-dadbod",\n  cmd = "DB",\n}\n')))),(0,o.kt)("h2",{id:"vim-dadbod-completion"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/kristijanhusak/vim-dadbod-completion"},"vim-dadbod-completion")),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "kristijanhusak/vim-dadbod-completion",\n  dependencies = "vim-dadbod",\n  ft = sql_ft,\n  init = function()\n    vim.api.nvim_create_autocmd("FileType", {\n      pattern = sql_ft,\n      callback = function()\n        if LazyVim.has_extra("coding.nvim-cmp") then\n          local cmp = require("cmp")\n\n          -- global sources\n          ---@param source cmp.SourceConfig\n          local sources = vim.tbl_map(function(source)\n            return { name = source.name }\n          end, cmp.get_config().sources)\n\n          -- add vim-dadbod-completion source\n          table.insert(sources, { name = "vim-dadbod-completion" })\n\n          -- update sources for the current buffer\n          cmp.setup.buffer({ sources = sources })\n        end\n      end,\n    })\n  end,\n}\n')))),(0,o.kt)("h2",{id:"vim-dadbod-ui"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/kristijanhusak/vim-dadbod-ui"},"vim-dadbod-ui")),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "kristijanhusak/vim-dadbod-ui",\n  cmd = { "DBUI", "DBUIToggle", "DBUIAddConnection", "DBUIFindBuffer" },\n  dependencies = "vim-dadbod",\n  keys = {\n    { "<leader>D", "<cmd>DBUIToggle<CR>", desc = "Toggle DBUI" },\n  },\n  init = function()\n    local data_path = vim.fn.stdpath("data")\n\n    vim.g.db_ui_auto_execute_table_helpers = 1\n    vim.g.db_ui_save_location = data_path .. "/dadbod_ui"\n    vim.g.db_ui_show_database_icon = true\n    vim.g.db_ui_tmp_query_location = data_path .. "/dadbod_ui/tmp"\n    vim.g.db_ui_use_nerd_fonts = true\n    vim.g.db_ui_use_nvim_notify = true\n\n    -- NOTE: The default behavior of auto-execution of queries on save is disabled\n    -- this is useful when you have a big query that you don\'t want to run every time\n    -- you save the file running those queries can crash neovim to run use the\n    -- default keymap: <leader>S\n    vim.g.db_ui_execute_on_save = false\n  end,\n}\n')))),(0,o.kt)("h2",{id:"vim-dadbod-completion-1"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/kristijanhusak/vim-dadbod-completion"},"vim-dadbod-completion")),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "kristijanhusak/vim-dadbod-completion",\n}\n')))),(0,o.kt)("h2",{id:"masonnvim"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")),(0,o.kt)("p",null," Linters & formatters"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'opts = { ensure_installed = { "sqlfluff" } }\n'))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mason-org/mason.nvim",\n  opts = { ensure_installed = { "sqlfluff" } },\n}\n')))),(0,o.kt)("h2",{id:"nvim-treesitter-optional"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter"},"nvim-treesitter")," ",(0,o.kt)("em",{parentName:"h2"},"(optional)")),(0,o.kt)("p",null," Treesitter"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'opts = { ensure_installed = { "sql" } }\n'))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter",\n  optional = true,\n  opts = { ensure_installed = { "sql" } },\n}\n')))),(0,o.kt)("h2",{id:"edgynvim-optional"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/folke/edgy.nvim"},"edgy.nvim")," ",(0,o.kt)("em",{parentName:"h2"},"(optional)")),(0,o.kt)("p",null," Edgy integration"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  opts.right = opts.right or {}\n  table.insert(opts.right, {\n    title = "Database",\n    ft = "dbui",\n    pinned = true,\n    width = 0.3,\n    open = function()\n      vim.cmd("DBUI")\n    end,\n  })\n\n  opts.bottom = opts.bottom or {}\n  table.insert(opts.bottom, {\n    title = "DB Query Result",\n    ft = "dbout",\n  })\nend\n'))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/edgy.nvim",\n  optional = true,\n  opts = function(_, opts)\n    opts.right = opts.right or {}\n    table.insert(opts.right, {\n      title = "Database",\n      ft = "dbui",\n      pinned = true,\n      width = 0.3,\n      open = function()\n        vim.cmd("DBUI")\n      end,\n    })\n\n    opts.bottom = opts.bottom or {}\n    table.insert(opts.bottom, {\n      title = "DB Query Result",\n      ft = "dbout",\n    })\n  end,\n}\n')))),(0,o.kt)("h2",{id:"blinkcmp-optional"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.cmp"},"blink.cmp")," ",(0,o.kt)("em",{parentName:"h2"},"(optional)")),(0,o.kt)("p",null," blink.cmp integration"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  sources = {\n    default = { "dadbod" },\n    providers = {\n      dadbod = { name = "Dadbod", module = "vim_dadbod_completion.blink" },\n    },\n  },\n}\n'))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.cmp",\n  optional = true,\n  opts = {\n    sources = {\n      default = { "dadbod" },\n      providers = {\n        dadbod = { name = "Dadbod", module = "vim_dadbod_completion.blink" },\n      },\n    },\n  },\n  dependencies = {\n    "kristijanhusak/vim-dadbod-completion",\n  },\n}\n')))),(0,o.kt)("h2",{id:"nvim-lint-optional"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-lint"},"nvim-lint")," ",(0,o.kt)("em",{parentName:"h2"},"(optional)")),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  for _, ft in ipairs(sql_ft) do\n    opts.linters_by_ft[ft] = opts.linters_by_ft[ft] or {}\n    table.insert(opts.linters_by_ft[ft], "sqlfluff")\n  end\nend\n'))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mfussenegger/nvim-lint",\n  optional = true,\n  opts = function(_, opts)\n    for _, ft in ipairs(sql_ft) do\n      opts.linters_by_ft[ft] = opts.linters_by_ft[ft] or {}\n      table.insert(opts.linters_by_ft[ft], "sqlfluff")\n    end\n  end,\n}\n')))),(0,o.kt)("h2",{id:"conformnvim-optional"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/stevearc/conform.nvim"},"conform.nvim")," ",(0,o.kt)("em",{parentName:"h2"},"(optional)")),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  opts.formatters.sqlfluff = {\n    args = { "format", "--dialect=ansi", "-" },\n  }\n  for _, ft in ipairs(sql_ft) do\n    opts.formatters_by_ft[ft] = opts.formatters_by_ft[ft] or {}\n    table.insert(opts.formatters_by_ft[ft], "sqlfluff")\n  end\nend\n'))),(0,o.kt)(r.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "stevearc/conform.nvim",\n  optional = true,\n  opts = function(_, opts)\n    opts.formatters.sqlfluff = {\n      args = { "format", "--dialect=ansi", "-" },\n    }\n    for _, ft in ipairs(sql_ft) do\n      opts.formatters_by_ft[ft] = opts.formatters_by_ft[ft] or {}\n      table.insert(opts.formatters_by_ft[ft], "sqlfluff")\n    end\n  end,\n}\n')))))}c.isMDXComponent=!0}}]);