"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8497],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),f=l,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||r;return t?i.createElement(m,a(a({ref:n},u),{},{components:t})):i.createElement(m,a({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,a=new Array(r);a[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:l,a[1]=o;for(var c=2;c<r;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>a});var i=t(7294),l=t(6010);const r="tabItem_Ymn6";function a(e){let{children:n,hidden:t,className:a}=e;return i.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,a),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var i=t(7462),l=t(7294),r=t(6010),a=t(2466),o=t(6550),s=t(1980),c=t(7392),u=t(12);function d(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:l}}=e;return{value:n,label:t,attributes:i,default:l}}))}function p(e){const{values:n,children:t}=e;return(0,l.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function f(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const i=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(r),(0,l.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=p(e),[a,o]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[s,c]=m({queryString:t,groupId:i}),[d,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,u.Nk)(t);return[i,(0,l.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),g=(()=>{const e=s??d;return f({value:e,tabValues:r})?e:null})();(0,l.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:a,selectValue:(0,l.useCallback)((e=>{if(!f({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),v(e)}),[c,v,r]),tabValues:r}}var g=t(2389);const b="tabList__CuJ",_="tabItem_LNqP";function h(e){let{className:n,block:t,selectedValue:o,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.o5)(),p=e=>{const n=e.currentTarget,t=u.indexOf(n),i=c[t].value;i!==o&&(d(n),s(i))},f=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:a}=e;return l.createElement("li",(0,i.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>u.push(e),onKeyDown:f,onClick:p},a,{className:(0,r.Z)("tabs__item",_,a?.className,{"tabs__item--active":o===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==i}))))}function k(e){const n=v(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",b)},l.createElement(h,(0,i.Z)({},e,n)),l.createElement(y,(0,i.Z)({},e,n)))}function w(e){const n=(0,g.Z)();return l.createElement(k,(0,i.Z)({key:String(n)},e))}},2523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=t(7462),l=(t(7294),t(3905)),r=t(4866),a=t(5162);const o={},s="Telescope",c={unversionedId:"extras/editor/telescope",id:"extras/editor/telescope",title:"Telescope",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/editor/telescope.md",sourceDirName:"extras/editor",slug:"/extras/editor/telescope",permalink:"/extras/editor/telescope",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/editor/telescope.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Snacks_picker",permalink:"/extras/editor/snacks_picker"},next:{title:"Biome",permalink:"/extras/formatting/biome"}},u={},d=[{value:"Options",id:"options",level:3},{value:"telescope.nvim",id:"telescopenvim",level:2},{value:"dressing.nvim",id:"dressingnvim",level:2},{value:"telescope.nvim",id:"telescopenvim-1",level:2},{value:"telescope-fzf-native.nvim",id:"telescope-fzf-nativenvim",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2}],p={toc:d};function f(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"telescope"},(0,l.kt)("inlineCode",{parentName:"h1"},"Telescope")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,l.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("p",null,"Additional options for this extra can be configured in your ",(0,l.kt)("a",{parentName:"p",href:"/configuration/general#options"},"lua/config/options.lua")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/options.lua"',title:'"lua/config/options.lua"'},'-- In case you don\'t want to use `:LazyExtras`,\n-- then you need to set the option below.\nvim.g.lazyvim_picker = "telescope"\n')),(0,l.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,l.kt)("h2",{id:"telescopenvim"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/nvim-telescope/telescope.nvim"},"telescope.nvim")),(0,l.kt)("p",null," Fuzzy finder.\nThe default key bindings to find files will use Telescope's\n",(0,l.kt)("inlineCode",{parentName:"p"},"find_files")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"git_files")," depending on whether the\ndirectory is a git repo."),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local actions = require("telescope.actions")\n\n  local open_with_trouble = function(...)\n    return require("trouble.sources.telescope").open(...)\n  end\n  local find_files_no_ignore = function()\n    local action_state = require("telescope.actions.state")\n    local line = action_state.get_current_line()\n    LazyVim.pick("find_files", { no_ignore = true, default_text = line })()\n  end\n  local find_files_with_hidden = function()\n    local action_state = require("telescope.actions.state")\n    local line = action_state.get_current_line()\n    LazyVim.pick("find_files", { hidden = true, default_text = line })()\n  end\n\n  local function find_command()\n    if 1 == vim.fn.executable("rg") then\n      return { "rg", "--files", "--color", "never", "-g", "!.git" }\n    elseif 1 == vim.fn.executable("fd") then\n      return { "fd", "--type", "f", "--color", "never", "-E", ".git" }\n    elseif 1 == vim.fn.executable("fdfind") then\n      return { "fdfind", "--type", "f", "--color", "never", "-E", ".git" }\n    elseif 1 == vim.fn.executable("find") and vim.fn.has("win32") == 0 then\n      return { "find", ".", "-type", "f" }\n    elseif 1 == vim.fn.executable("where") then\n      return { "where", "/r", ".", "*" }\n    end\n  end\n\n  return {\n    defaults = {\n      prompt_prefix = "\uf054 ",\n      selection_caret = "\uf44a ",\n      -- open files in the first window that is an actual file.\n      -- use the current window if no other window is available.\n      get_selection_window = function()\n        local wins = vim.api.nvim_list_wins()\n        table.insert(wins, 1, vim.api.nvim_get_current_win())\n        for _, win in ipairs(wins) do\n          local buf = vim.api.nvim_win_get_buf(win)\n          if vim.bo[buf].buftype == "" then\n            return win\n          end\n        end\n        return 0\n      end,\n      mappings = {\n        i = {\n          ["<c-t>"] = open_with_trouble,\n          ["<a-t>"] = open_with_trouble,\n          ["<a-i>"] = find_files_no_ignore,\n          ["<a-h>"] = find_files_with_hidden,\n          ["<C-Down>"] = actions.cycle_history_next,\n          ["<C-Up>"] = actions.cycle_history_prev,\n          ["<C-f>"] = actions.preview_scrolling_down,\n          ["<C-b>"] = actions.preview_scrolling_up,\n        },\n        n = {\n          ["q"] = actions.close,\n        },\n      },\n    },\n    pickers = {\n      find_files = {\n        find_command = find_command,\n        hidden = true,\n      },\n    },\n  }\nend\n'))),(0,l.kt)(a.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-telescope/telescope.nvim",\n  cmd = "Telescope",\n  version = false, -- telescope did only one release, so use HEAD for now\n  dependencies = {\n    {\n      "nvim-telescope/telescope-fzf-native.nvim",\n      build = (build_cmd ~= "cmake") and "make"\n        or "cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build",\n      enabled = build_cmd ~= nil,\n      config = function(plugin)\n        LazyVim.on_load("telescope.nvim", function()\n          local ok, err = pcall(require("telescope").load_extension, "fzf")\n          if not ok then\n            local lib = plugin.dir .. "/build/libfzf." .. (LazyVim.is_win() and "dll" or "so")\n            if not vim.uv.fs_stat(lib) then\n              LazyVim.warn("`telescope-fzf-native.nvim` not built. Rebuilding...")\n              require("lazy").build({ plugins = { plugin }, show = false }):wait(function()\n                LazyVim.info("Rebuilding `telescope-fzf-native.nvim` done.\\nPlease restart Neovim.")\n              end)\n            else\n              LazyVim.error("Failed to load `telescope-fzf-native.nvim`:\\n" .. err)\n            end\n          end\n        end)\n      end,\n    },\n  },\n  keys = {\n    {\n      "<leader>,",\n      "<cmd>Telescope buffers sort_mru=true sort_lastused=true<cr>",\n      desc = "Switch Buffer",\n    },\n    { "<leader>/", LazyVim.pick("live_grep"), desc = "Grep (Root Dir)" },\n    { "<leader>:", "<cmd>Telescope command_history<cr>", desc = "Command History" },\n    { "<leader><space>", LazyVim.pick("files"), desc = "Find Files (Root Dir)" },\n    -- find\n    {\n      "<leader>fb",\n      "<cmd>Telescope buffers sort_mru=true sort_lastused=true ignore_current_buffer=true<cr>",\n      desc = "Buffers",\n    },\n    { "<leader>fc", LazyVim.pick.config_files(), desc = "Find Config File" },\n    { "<leader>ff", LazyVim.pick("files"), desc = "Find Files (Root Dir)" },\n    { "<leader>fF", LazyVim.pick("files", { root = false }), desc = "Find Files (cwd)" },\n    { "<leader>fg", "<cmd>Telescope git_files<cr>", desc = "Find Files (git-files)" },\n    { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent" },\n    { "<leader>fR", LazyVim.pick("oldfiles", { cwd = vim.uv.cwd() }), desc = "Recent (cwd)" },\n    -- git\n    { "<leader>gc", "<cmd>Telescope git_commits<CR>", desc = "Commits" },\n    { "<leader>gs", "<cmd>Telescope git_status<CR>", desc = "Status" },\n    -- search\n    { \'<leader>s"\', "<cmd>Telescope registers<cr>", desc = "Registers" },\n    { "<leader>sa", "<cmd>Telescope autocommands<cr>", desc = "Auto Commands" },\n    { "<leader>sb", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Buffer" },\n    { "<leader>sc", "<cmd>Telescope command_history<cr>", desc = "Command History" },\n    { "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands" },\n    { "<leader>sd", "<cmd>Telescope diagnostics bufnr=0<cr>", desc = "Document Diagnostics" },\n    { "<leader>sD", "<cmd>Telescope diagnostics<cr>", desc = "Workspace Diagnostics" },\n    { "<leader>sg", LazyVim.pick("live_grep"), desc = "Grep (Root Dir)" },\n    { "<leader>sG", LazyVim.pick("live_grep", { root = false }), desc = "Grep (cwd)" },\n    { "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Help Pages" },\n    { "<leader>sH", "<cmd>Telescope highlights<cr>", desc = "Search Highlight Groups" },\n    { "<leader>sj", "<cmd>Telescope jumplist<cr>", desc = "Jumplist" },\n    { "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Key Maps" },\n    { "<leader>sl", "<cmd>Telescope loclist<cr>", desc = "Location List" },\n    { "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },\n    { "<leader>sm", "<cmd>Telescope marks<cr>", desc = "Jump to Mark" },\n    { "<leader>so", "<cmd>Telescope vim_options<cr>", desc = "Options" },\n    { "<leader>sR", "<cmd>Telescope resume<cr>", desc = "Resume" },\n    { "<leader>sq", "<cmd>Telescope quickfix<cr>", desc = "Quickfix List" },\n    { "<leader>sw", LazyVim.pick("grep_string", { word_match = "-w" }), desc = "Word (Root Dir)" },\n    { "<leader>sW", LazyVim.pick("grep_string", { root = false, word_match = "-w" }), desc = "Word (cwd)" },\n    { "<leader>sw", LazyVim.pick("grep_string"), mode = "v", desc = "Selection (Root Dir)" },\n    { "<leader>sW", LazyVim.pick("grep_string", { root = false }), mode = "v", desc = "Selection (cwd)" },\n    { "<leader>uC", LazyVim.pick("colorscheme", { enable_preview = true }), desc = "Colorscheme with Preview" },\n    {\n      "<leader>ss",\n      function()\n        require("telescope.builtin").lsp_document_symbols({\n          symbols = LazyVim.config.get_kind_filter(),\n        })\n      end,\n      desc = "Goto Symbol",\n    },\n    {\n      "<leader>sS",\n      function()\n        require("telescope.builtin").lsp_dynamic_workspace_symbols({\n          symbols = LazyVim.config.get_kind_filter(),\n        })\n      end,\n      desc = "Goto Symbol (Workspace)",\n    },\n  },\n  opts = function()\n    local actions = require("telescope.actions")\n\n    local open_with_trouble = function(...)\n      return require("trouble.sources.telescope").open(...)\n    end\n    local find_files_no_ignore = function()\n      local action_state = require("telescope.actions.state")\n      local line = action_state.get_current_line()\n      LazyVim.pick("find_files", { no_ignore = true, default_text = line })()\n    end\n    local find_files_with_hidden = function()\n      local action_state = require("telescope.actions.state")\n      local line = action_state.get_current_line()\n      LazyVim.pick("find_files", { hidden = true, default_text = line })()\n    end\n\n    local function find_command()\n      if 1 == vim.fn.executable("rg") then\n        return { "rg", "--files", "--color", "never", "-g", "!.git" }\n      elseif 1 == vim.fn.executable("fd") then\n        return { "fd", "--type", "f", "--color", "never", "-E", ".git" }\n      elseif 1 == vim.fn.executable("fdfind") then\n        return { "fdfind", "--type", "f", "--color", "never", "-E", ".git" }\n      elseif 1 == vim.fn.executable("find") and vim.fn.has("win32") == 0 then\n        return { "find", ".", "-type", "f" }\n      elseif 1 == vim.fn.executable("where") then\n        return { "where", "/r", ".", "*" }\n      end\n    end\n\n    return {\n      defaults = {\n        prompt_prefix = "\uf054 ",\n        selection_caret = "\uf44a ",\n        -- open files in the first window that is an actual file.\n        -- use the current window if no other window is available.\n        get_selection_window = function()\n          local wins = vim.api.nvim_list_wins()\n          table.insert(wins, 1, vim.api.nvim_get_current_win())\n          for _, win in ipairs(wins) do\n            local buf = vim.api.nvim_win_get_buf(win)\n            if vim.bo[buf].buftype == "" then\n              return win\n            end\n          end\n          return 0\n        end,\n        mappings = {\n          i = {\n            ["<c-t>"] = open_with_trouble,\n            ["<a-t>"] = open_with_trouble,\n            ["<a-i>"] = find_files_no_ignore,\n            ["<a-h>"] = find_files_with_hidden,\n            ["<C-Down>"] = actions.cycle_history_next,\n            ["<C-Up>"] = actions.cycle_history_prev,\n            ["<C-f>"] = actions.preview_scrolling_down,\n            ["<C-b>"] = actions.preview_scrolling_up,\n          },\n          n = {\n            ["q"] = actions.close,\n          },\n        },\n      },\n      pickers = {\n        find_files = {\n          find_command = find_command,\n          hidden = true,\n        },\n      },\n    }\n  end,\n}\n')))),(0,l.kt)("h2",{id:"dressingnvim"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/stevearc/dressing.nvim"},"dressing.nvim")),(0,l.kt)("p",null," better vim.ui with telescope"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,l.kt)(a.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "stevearc/dressing.nvim",\n  lazy = true,\n  init = function()\n    ---@diagnostic disable-next-line: duplicate-set-field\n    vim.ui.select = function(...)\n      require("lazy").load({ plugins = { "dressing.nvim" } })\n      return vim.ui.select(...)\n    end\n    ---@diagnostic disable-next-line: duplicate-set-field\n    vim.ui.input = function(...)\n      require("lazy").load({ plugins = { "dressing.nvim" } })\n      return vim.ui.input(...)\n    end\n  end,\n}\n')))),(0,l.kt)("h2",{id:"telescopenvim-1"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/nvim-telescope/telescope.nvim"},"telescope.nvim")),(0,l.kt)("p",null," Flash Telescope config"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  if not LazyVim.has("flash.nvim") then\n    return\n  end\n  local function flash(prompt_bufnr)\n    require("flash").jump({\n      pattern = "^",\n      label = { after = { 0, 0 } },\n      search = {\n        mode = "search",\n        exclude = {\n          function(win)\n            return vim.bo[vim.api.nvim_win_get_buf(win)].filetype ~= "TelescopeResults"\n          end,\n        },\n      },\n      action = function(match)\n        local picker = require("telescope.actions.state").get_current_picker(prompt_bufnr)\n        picker:set_selection(match.pos[1] - 1)\n      end,\n    })\n  end\n  opts.defaults = vim.tbl_deep_extend("force", opts.defaults or {}, {\n    mappings = { n = { s = flash }, i = { ["<c-s>"] = flash } },\n  })\nend\n'))),(0,l.kt)(a.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-telescope/telescope.nvim",\n  optional = true,\n  opts = function(_, opts)\n    if not LazyVim.has("flash.nvim") then\n      return\n    end\n    local function flash(prompt_bufnr)\n      require("flash").jump({\n        pattern = "^",\n        label = { after = { 0, 0 } },\n        search = {\n          mode = "search",\n          exclude = {\n            function(win)\n              return vim.bo[vim.api.nvim_win_get_buf(win)].filetype ~= "TelescopeResults"\n            end,\n          },\n        },\n        action = function(match)\n          local picker = require("telescope.actions.state").get_current_picker(prompt_bufnr)\n          picker:set_selection(match.pos[1] - 1)\n        end,\n      })\n    end\n    opts.defaults = vim.tbl_deep_extend("force", opts.defaults or {}, {\n      mappings = { n = { s = flash }, i = { ["<c-s>"] = flash } },\n    })\n  end,\n}\n')))),(0,l.kt)("h2",{id:"telescope-fzf-nativenvim"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/nvim-telescope/telescope-fzf-native.nvim"},"telescope-fzf-native.nvim")),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,l.kt)(a.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-telescope/telescope-fzf-native.nvim",\n  build = (build_cmd ~= "cmake") and "make"\n    or "cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build",\n  enabled = build_cmd ~= nil,\n  config = function(plugin)\n    LazyVim.on_load("telescope.nvim", function()\n      local ok, err = pcall(require("telescope").load_extension, "fzf")\n      if not ok then\n        local lib = plugin.dir .. "/build/libfzf." .. (LazyVim.is_win() and "dll" or "so")\n        if not vim.uv.fs_stat(lib) then\n          LazyVim.warn("`telescope-fzf-native.nvim` not built. Rebuilding...")\n          require("lazy").build({ plugins = { plugin }, show = false }):wait(function()\n            LazyVim.info("Rebuilding `telescope-fzf-native.nvim` done.\\nPlease restart Neovim.")\n          end)\n        else\n          LazyVim.error("Failed to load `telescope-fzf-native.nvim`:\\n" .. err)\n        end\n      end\n    end)\n  end,\n}\n')))),(0,l.kt)("h2",{id:"nvim-lspconfig"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local Keys = require("lazyvim.plugins.lsp.keymaps").get()\n  -- stylua: ignore\n  vim.list_extend(Keys, {\n    { "gd", function() require("telescope.builtin").lsp_definitions({ reuse_win = true }) end, desc = "Goto Definition", has = "definition" },\n    { "gr", "<cmd>Telescope lsp_references<cr>", desc = "References", nowait = true },\n    { "gI", function() require("telescope.builtin").lsp_implementations({ reuse_win = true }) end, desc = "Goto Implementation" },\n    { "gy", function() require("telescope.builtin").lsp_type_definitions({ reuse_win = true }) end, desc = "Goto T[y]pe Definition" },\n  })\nend\n'))),(0,l.kt)(a.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = function()\n    local Keys = require("lazyvim.plugins.lsp.keymaps").get()\n    -- stylua: ignore\n    vim.list_extend(Keys, {\n      { "gd", function() require("telescope.builtin").lsp_definitions({ reuse_win = true }) end, desc = "Goto Definition", has = "definition" },\n      { "gr", "<cmd>Telescope lsp_references<cr>", desc = "References", nowait = true },\n      { "gI", function() require("telescope.builtin").lsp_implementations({ reuse_win = true }) end, desc = "Goto Implementation" },\n      { "gy", function() require("telescope.builtin").lsp_type_definitions({ reuse_win = true }) end, desc = "Goto T[y]pe Definition" },\n    })\n  end,\n}\n')))))}f.isMDXComponent=!0}}]);