"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[7928],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var s=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return t?s.createElement(f,o(o({ref:n},u),{},{components:t})):s.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[p]="string"==typeof e?e:a,o[1]=r;for(var c=2;c<i;c++)o[c]=t[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var s=t(7294),a=t(6010);const i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return s.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var s=t(7462),a=t(7294),i=t(6010),o=t(2466),r=t(6550),l=t(1980),c=t(7392),u=t(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const s=(0,r.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=d(e),[o,r]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[l,c]=f({queryString:t,groupId:s}),[p,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,u.Nk)(t);return[s,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),g=(()=>{const e=l??p;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{g&&r(g)}),[g]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),c(e),v(e)}),[c,v,i]),tabValues:i}}var g=t(2389);const y="tabList__CuJ",h="tabItem_LNqP";function b(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),s=c[t].value;s!==r&&(p(n),l(s))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,s.Z)({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",h,o?.className,{"tabs__item--active":r===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s}))))}function _(e){const n=v(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",y)},a.createElement(b,(0,s.Z)({},e,n)),a.createElement(k,(0,s.Z)({},e,n)))}function w(e){const n=(0,g.Z)();return a.createElement(_,(0,s.Z)({key:String(n)},e))}},965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var s=t(7462),a=(t(7294),t(3905)),i=t(4866),o=t(5162);const r={},l="LSP",c={unversionedId:"plugins/lsp",id:"plugins/lsp",title:"LSP",description:"\u2328\ufe0f Customizing LSP Keymaps",source:"@site/docs/plugins/lsp.md",sourceDirName:"plugins",slug:"/plugins/lsp",permalink:"/plugins/lsp",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/plugins/lsp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linting",permalink:"/plugins/linting"},next:{title:"TreeSitter",permalink:"/plugins/treesitter"}},u={},p=[{value:"\u2328\ufe0f Customizing LSP Keymaps",id:"\ufe0f-customizing-lsp-keymaps",level:2},{value:"Global LSP Keymaps",id:"global-lsp-keymaps",level:3},{value:"Server-Specific Keymaps",id:"server-specific-keymaps",level:3},{value:"Capability-Based Keymaps",id:"capability-based-keymaps",level:3},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"mason.nvim",id:"masonnvim",level:2},{value:"mason-lspconfig.nvim",id:"mason-lspconfignvim",level:2},{value:"mason.nvim",id:"masonnvim-1",level:2}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lsp"},"LSP"),(0,a.kt)("h2",{id:"\ufe0f-customizing-lsp-keymaps"},"\u2328\ufe0f Customizing ",(0,a.kt)("a",{parentName:"h2",href:"/keymaps#lsp"},"LSP Keymaps")),(0,a.kt)("p",null,"LSP keymaps are configured using the ",(0,a.kt)("inlineCode",{parentName:"p"},"keys")," option in your server configuration.\nYou can add global keymaps that apply to all LSP servers, or server-specific keymaps."),(0,a.kt)("h3",{id:"global-lsp-keymaps"},"Global LSP Keymaps"),(0,a.kt)("p",null,"Use the special ",(0,a.kt)("inlineCode",{parentName:"p"},"servers['*']")," key to add keymaps for all LSP servers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      [\'*\'] = {\n        keys = {\n          -- Add a keymap\n          { "H", "<cmd>echo \'hello\'<cr>", desc = "Say Hello" },\n          -- Change an existing keymap\n          { "K", "<cmd>echo \'custom hover\'<cr>", desc = "Custom Hover" },\n          -- Disable a keymap\n          { "gd", false },\n        },\n      },\n    },\n  },\n}\n')),(0,a.kt)("h3",{id:"server-specific-keymaps"},"Server-Specific Keymaps"),(0,a.kt)("p",null,"Add keymaps for specific LSP servers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      vtsls = {\n        keys = {\n          { "<leader>co", function()\n            vim.lsp.buf.code_action({\n              apply = true,\n              context = {\n                only = { "source.organizeImports" },\n                diagnostics = {},\n              },\n            })\n          end, desc = "Organize Imports" },\n        },\n      },\n    },\n  },\n}\n')),(0,a.kt)("h3",{id:"capability-based-keymaps"},"Capability-Based Keymaps"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"has")," field to only set keymaps when the LSP server supports specific capabilities:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      [\'*\'] = {\n        keys = {\n          -- Only set this keymap for servers that support code actions\n          { "<leader>ca", vim.lsp.buf.code_action, desc = "Code Action", has = "codeAction" },\n          -- Multiple capabilities\n          { "<leader>cR", function() Snacks.rename.rename_file() end, desc = "Rename File",\n            has = { "workspace/didRenameFiles", "workspace/willRenameFiles" } },\n        },\n      },\n    },\n  },\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": The ",(0,a.kt)("inlineCode",{parentName:"p"},"has")," field automatically prefixes methods with ",(0,a.kt)("inlineCode",{parentName:"p"},"textDocument/")," if no ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," is present.\nSo ",(0,a.kt)("inlineCode",{parentName:"p"},'has = "codeAction"')," becomes ",(0,a.kt)("inlineCode",{parentName:"p"},'has = "textDocument/codeAction"'),"."),(0,a.kt)("h2",{id:"nvim-lspconfig"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,a.kt)("p",null," lspconfig"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  ---@class PluginLspOpts\n  local ret = {\n    -- options for vim.diagnostic.config()\n    ---@type vim.diagnostic.Opts\n    diagnostics = {\n      underline = true,\n      update_in_insert = false,\n      virtual_text = {\n        spacing = 4,\n        source = "if_many",\n        prefix = "\u25cf",\n        -- this will set set the prefix to a function that returns the diagnostics icon based on the severity\n        -- prefix = "icons",\n      },\n      severity_sort = true,\n      signs = {\n        text = {\n          [vim.diagnostic.severity.ERROR] = LazyVim.config.icons.diagnostics.Error,\n          [vim.diagnostic.severity.WARN] = LazyVim.config.icons.diagnostics.Warn,\n          [vim.diagnostic.severity.HINT] = LazyVim.config.icons.diagnostics.Hint,\n          [vim.diagnostic.severity.INFO] = LazyVim.config.icons.diagnostics.Info,\n        },\n      },\n    },\n    -- Enable this to enable the builtin LSP inlay hints on Neovim.\n    -- Be aware that you also will need to properly configure your LSP server to\n    -- provide the inlay hints.\n    inlay_hints = {\n      enabled = true,\n      exclude = { "vue" }, -- filetypes for which you don\'t want to enable inlay hints\n    },\n    -- Enable this to enable the builtin LSP code lenses on Neovim.\n    -- Be aware that you also will need to properly configure your LSP server to\n    -- provide the code lenses.\n    codelens = {\n      enabled = false,\n    },\n    -- Enable this to enable the builtin LSP folding on Neovim.\n    -- Be aware that you also will need to properly configure your LSP server to\n    -- provide the folds.\n    folds = {\n      enabled = true,\n    },\n    -- options for vim.lsp.buf.format\n    -- `bufnr` and `filter` is handled by the LazyVim formatter,\n    -- but can be also overridden when specified\n    format = {\n      formatting_options = nil,\n      timeout_ms = nil,\n    },\n    -- LSP Server Settings\n    -- Sets the default configuration for an LSP client (or all clients if the special name "*" is used).\n    ---@alias lazyvim.lsp.Config vim.lsp.Config|{mason?:boolean, enabled?:boolean, keys?:LazyKeysLspSpec[]}\n    ---@type table<string, lazyvim.lsp.Config|boolean>\n    servers = {\n      -- configuration for all lsp servers\n      ["*"] = {\n        capabilities = {\n          workspace = {\n            fileOperations = {\n              didRename = true,\n              willRename = true,\n            },\n          },\n        },\n        -- stylua: ignore\n        keys = {\n          { "<leader>cl", function() Snacks.picker.lsp_config() end, desc = "Lsp Info" },\n          { "gd", vim.lsp.buf.definition, desc = "Goto Definition", has = "definition" },\n          { "gr", vim.lsp.buf.references, desc = "References", nowait = true },\n          { "gI", vim.lsp.buf.implementation, desc = "Goto Implementation" },\n          { "gy", vim.lsp.buf.type_definition, desc = "Goto T[y]pe Definition" },\n          { "gD", vim.lsp.buf.declaration, desc = "Goto Declaration" },\n          { "K", function() return vim.lsp.buf.hover() end, desc = "Hover" },\n          { "gK", function() return vim.lsp.buf.signature_help() end, desc = "Signature Help", has = "signatureHelp" },\n          { "<c-k>", function() return vim.lsp.buf.signature_help() end, mode = "i", desc = "Signature Help", has = "signatureHelp" },\n          { "<leader>ca", vim.lsp.buf.code_action, desc = "Code Action", mode = { "n", "x" }, has = "codeAction" },\n          { "<leader>cc", vim.lsp.codelens.run, desc = "Run Codelens", mode = { "n", "x" }, has = "codeLens" },\n          { "<leader>cC", vim.lsp.codelens.refresh, desc = "Refresh & Display Codelens", mode = { "n" }, has = "codeLens" },\n          { "<leader>cR", function() Snacks.rename.rename_file() end, desc = "Rename File", mode ={"n"}, has = { "workspace/didRenameFiles", "workspace/willRenameFiles" } },\n          { "<leader>cr", vim.lsp.buf.rename, desc = "Rename", has = "rename" },\n          { "<leader>cA", LazyVim.lsp.action.source, desc = "Source Action", has = "codeAction" },\n          { "]]", function() Snacks.words.jump(vim.v.count1) end, has = "documentHighlight",\n            desc = "Next Reference", enabled = function() return Snacks.words.is_enabled() end },\n          { "[[", function() Snacks.words.jump(-vim.v.count1) end, has = "documentHighlight",\n            desc = "Prev Reference", enabled = function() return Snacks.words.is_enabled() end },\n          { "<a-n>", function() Snacks.words.jump(vim.v.count1, true) end, has = "documentHighlight",\n            desc = "Next Reference", enabled = function() return Snacks.words.is_enabled() end },\n          { "<a-p>", function() Snacks.words.jump(-vim.v.count1, true) end, has = "documentHighlight",\n            desc = "Prev Reference", enabled = function() return Snacks.words.is_enabled() end },\n        },\n      },\n      stylua = { enabled = false },\n      lua_ls = {\n        -- mason = false, -- set to false if you don\'t want this server to be installed with mason\n        -- Use this to add any additional keymaps\n        -- for specific lsp servers\n        -- ---@type LazyKeysSpec[]\n        -- keys = {},\n        settings = {\n          Lua = {\n            workspace = {\n              checkThirdParty = false,\n            },\n            codeLens = {\n              enable = true,\n            },\n            completion = {\n              callSnippet = "Replace",\n            },\n            doc = {\n              privateName = { "^_" },\n            },\n            hint = {\n              enable = true,\n              setType = false,\n              paramType = true,\n              paramName = "Disable",\n              semicolon = "Disable",\n              arrayIndex = "Disable",\n            },\n          },\n        },\n      },\n    },\n    -- you can do any additional lsp server setup here\n    -- return true if you don\'t want this server to be setup with lspconfig\n    ---@type table<string, fun(server:string, opts: vim.lsp.Config):boolean?>\n    setup = {\n      -- example to setup with typescript.nvim\n      -- tsserver = function(_, opts)\n      --   require("typescript").setup({ server = opts })\n      --   return true\n      -- end,\n      -- Specify * to use this function as a fallback for any server\n      -- ["*"] = function(server, opts) end,\n    },\n  }\n  return ret\nend\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  event = "LazyFile",\n  dependencies = {\n    "mason.nvim",\n    { "mason-org/mason-lspconfig.nvim", config = function() end },\n  },\n  opts_extend = { "servers.*.keys" },\n  opts = function()\n    ---@class PluginLspOpts\n    local ret = {\n      -- options for vim.diagnostic.config()\n      ---@type vim.diagnostic.Opts\n      diagnostics = {\n        underline = true,\n        update_in_insert = false,\n        virtual_text = {\n          spacing = 4,\n          source = "if_many",\n          prefix = "\u25cf",\n          -- this will set set the prefix to a function that returns the diagnostics icon based on the severity\n          -- prefix = "icons",\n        },\n        severity_sort = true,\n        signs = {\n          text = {\n            [vim.diagnostic.severity.ERROR] = LazyVim.config.icons.diagnostics.Error,\n            [vim.diagnostic.severity.WARN] = LazyVim.config.icons.diagnostics.Warn,\n            [vim.diagnostic.severity.HINT] = LazyVim.config.icons.diagnostics.Hint,\n            [vim.diagnostic.severity.INFO] = LazyVim.config.icons.diagnostics.Info,\n          },\n        },\n      },\n      -- Enable this to enable the builtin LSP inlay hints on Neovim.\n      -- Be aware that you also will need to properly configure your LSP server to\n      -- provide the inlay hints.\n      inlay_hints = {\n        enabled = true,\n        exclude = { "vue" }, -- filetypes for which you don\'t want to enable inlay hints\n      },\n      -- Enable this to enable the builtin LSP code lenses on Neovim.\n      -- Be aware that you also will need to properly configure your LSP server to\n      -- provide the code lenses.\n      codelens = {\n        enabled = false,\n      },\n      -- Enable this to enable the builtin LSP folding on Neovim.\n      -- Be aware that you also will need to properly configure your LSP server to\n      -- provide the folds.\n      folds = {\n        enabled = true,\n      },\n      -- options for vim.lsp.buf.format\n      -- `bufnr` and `filter` is handled by the LazyVim formatter,\n      -- but can be also overridden when specified\n      format = {\n        formatting_options = nil,\n        timeout_ms = nil,\n      },\n      -- LSP Server Settings\n      -- Sets the default configuration for an LSP client (or all clients if the special name "*" is used).\n      ---@alias lazyvim.lsp.Config vim.lsp.Config|{mason?:boolean, enabled?:boolean, keys?:LazyKeysLspSpec[]}\n      ---@type table<string, lazyvim.lsp.Config|boolean>\n      servers = {\n        -- configuration for all lsp servers\n        ["*"] = {\n          capabilities = {\n            workspace = {\n              fileOperations = {\n                didRename = true,\n                willRename = true,\n              },\n            },\n          },\n          -- stylua: ignore\n          keys = {\n            { "<leader>cl", function() Snacks.picker.lsp_config() end, desc = "Lsp Info" },\n            { "gd", vim.lsp.buf.definition, desc = "Goto Definition", has = "definition" },\n            { "gr", vim.lsp.buf.references, desc = "References", nowait = true },\n            { "gI", vim.lsp.buf.implementation, desc = "Goto Implementation" },\n            { "gy", vim.lsp.buf.type_definition, desc = "Goto T[y]pe Definition" },\n            { "gD", vim.lsp.buf.declaration, desc = "Goto Declaration" },\n            { "K", function() return vim.lsp.buf.hover() end, desc = "Hover" },\n            { "gK", function() return vim.lsp.buf.signature_help() end, desc = "Signature Help", has = "signatureHelp" },\n            { "<c-k>", function() return vim.lsp.buf.signature_help() end, mode = "i", desc = "Signature Help", has = "signatureHelp" },\n            { "<leader>ca", vim.lsp.buf.code_action, desc = "Code Action", mode = { "n", "x" }, has = "codeAction" },\n            { "<leader>cc", vim.lsp.codelens.run, desc = "Run Codelens", mode = { "n", "x" }, has = "codeLens" },\n            { "<leader>cC", vim.lsp.codelens.refresh, desc = "Refresh & Display Codelens", mode = { "n" }, has = "codeLens" },\n            { "<leader>cR", function() Snacks.rename.rename_file() end, desc = "Rename File", mode ={"n"}, has = { "workspace/didRenameFiles", "workspace/willRenameFiles" } },\n            { "<leader>cr", vim.lsp.buf.rename, desc = "Rename", has = "rename" },\n            { "<leader>cA", LazyVim.lsp.action.source, desc = "Source Action", has = "codeAction" },\n            { "]]", function() Snacks.words.jump(vim.v.count1) end, has = "documentHighlight",\n              desc = "Next Reference", enabled = function() return Snacks.words.is_enabled() end },\n            { "[[", function() Snacks.words.jump(-vim.v.count1) end, has = "documentHighlight",\n              desc = "Prev Reference", enabled = function() return Snacks.words.is_enabled() end },\n            { "<a-n>", function() Snacks.words.jump(vim.v.count1, true) end, has = "documentHighlight",\n              desc = "Next Reference", enabled = function() return Snacks.words.is_enabled() end },\n            { "<a-p>", function() Snacks.words.jump(-vim.v.count1, true) end, has = "documentHighlight",\n              desc = "Prev Reference", enabled = function() return Snacks.words.is_enabled() end },\n          },\n        },\n        stylua = { enabled = false },\n        lua_ls = {\n          -- mason = false, -- set to false if you don\'t want this server to be installed with mason\n          -- Use this to add any additional keymaps\n          -- for specific lsp servers\n          -- ---@type LazyKeysSpec[]\n          -- keys = {},\n          settings = {\n            Lua = {\n              workspace = {\n                checkThirdParty = false,\n              },\n              codeLens = {\n                enable = true,\n              },\n              completion = {\n                callSnippet = "Replace",\n              },\n              doc = {\n                privateName = { "^_" },\n              },\n              hint = {\n                enable = true,\n                setType = false,\n                paramType = true,\n                paramName = "Disable",\n                semicolon = "Disable",\n                arrayIndex = "Disable",\n              },\n            },\n          },\n        },\n      },\n      -- you can do any additional lsp server setup here\n      -- return true if you don\'t want this server to be setup with lspconfig\n      ---@type table<string, fun(server:string, opts: vim.lsp.Config):boolean?>\n      setup = {\n        -- example to setup with typescript.nvim\n        -- tsserver = function(_, opts)\n        --   require("typescript").setup({ server = opts })\n        --   return true\n        -- end,\n        -- Specify * to use this function as a fallback for any server\n        -- ["*"] = function(server, opts) end,\n      },\n    }\n    return ret\n  end,\n  ---@param opts PluginLspOpts\n  config = vim.schedule_wrap(function(_, opts)\n    -- setup autoformat\n    LazyVim.format.register(LazyVim.lsp.formatter())\n\n    -- setup keymaps\n    for server, server_opts in pairs(opts.servers) do\n      if type(server_opts) == "table" and server_opts.keys then\n        require("lazyvim.plugins.lsp.keymaps").set({ name = server ~= "*" and server or nil }, server_opts.keys)\n      end\n    end\n\n    -- inlay hints\n    if opts.inlay_hints.enabled then\n      Snacks.util.lsp.on({ method = "textDocument/inlayHint" }, function(buffer)\n        if\n          vim.api.nvim_buf_is_valid(buffer)\n          and vim.bo[buffer].buftype == ""\n          and not vim.tbl_contains(opts.inlay_hints.exclude, vim.bo[buffer].filetype)\n        then\n          vim.lsp.inlay_hint.enable(true, { bufnr = buffer })\n        end\n      end)\n    end\n\n    -- folds\n    if opts.folds.enabled then\n      Snacks.util.lsp.on({ method = "textDocument/foldingRange" }, function()\n        if LazyVim.set_default("foldmethod", "expr") then\n          LazyVim.set_default("foldexpr", "v:lua.vim.lsp.foldexpr()")\n        end\n      end)\n    end\n\n    -- code lens\n    if opts.codelens.enabled and vim.lsp.codelens then\n      Snacks.util.lsp.on({ method = "textDocument/codeLens" }, function(buffer)\n        vim.lsp.codelens.refresh()\n        vim.api.nvim_create_autocmd({ "BufEnter", "CursorHold", "InsertLeave" }, {\n          buffer = buffer,\n          callback = vim.lsp.codelens.refresh,\n        })\n      end)\n    end\n\n    -- diagnostics\n    if type(opts.diagnostics.virtual_text) == "table" and opts.diagnostics.virtual_text.prefix == "icons" then\n      opts.diagnostics.virtual_text.prefix = function(diagnostic)\n        local icons = LazyVim.config.icons.diagnostics\n        for d, icon in pairs(icons) do\n          if diagnostic.severity == vim.diagnostic.severity[d:upper()] then\n            return icon\n          end\n        end\n        return "\u25cf"\n      end\n    end\n    vim.diagnostic.config(vim.deepcopy(opts.diagnostics))\n\n    if opts.capabilities then\n      LazyVim.deprecate("lsp-config.opts.capabilities", "Use lsp-config.opts.servers[\'*\'].capabilities instead")\n      opts.servers["*"] = vim.tbl_deep_extend("force", opts.servers["*"] or {}, {\n        capabilities = opts.capabilities,\n      })\n    end\n\n    if opts.servers["*"] then\n      vim.lsp.config("*", opts.servers["*"])\n    end\n\n    -- get all the servers that are available through mason-lspconfig\n    local have_mason = LazyVim.has("mason-lspconfig.nvim")\n    local mason_all = have_mason\n        and vim.tbl_keys(require("mason-lspconfig.mappings").get_mason_map().lspconfig_to_package)\n      or {} --[[ @as string[] ]]\n    local mason_exclude = {} ---@type string[]\n\n    ---@return boolean? exclude automatic setup\n    local function configure(server)\n      if server == "*" then\n        return false\n      end\n      local sopts = opts.servers[server]\n      sopts = sopts == true and {} or (not sopts) and { enabled = false } or sopts --[[@as lazyvim.lsp.Config]]\n\n      if sopts.enabled == false then\n        mason_exclude[#mason_exclude + 1] = server\n        return\n      end\n\n      local use_mason = sopts.mason ~= false and vim.tbl_contains(mason_all, server)\n      local setup = opts.setup[server] or opts.setup["*"]\n      if setup and setup(server, sopts) then\n        mason_exclude[#mason_exclude + 1] = server\n      else\n        vim.lsp.config(server, sopts) -- configure the server\n        if not use_mason then\n          vim.lsp.enable(server)\n        end\n      end\n      return use_mason\n    end\n\n    local install = vim.tbl_filter(configure, vim.tbl_keys(opts.servers))\n    if have_mason then\n      require("mason-lspconfig").setup({\n        ensure_installed = vim.list_extend(install, LazyVim.opts("mason-lspconfig.nvim").ensure_installed or {}),\n        automatic_enable = { exclude = mason_exclude },\n      })\n    end\n  end),\n}\n')))),(0,a.kt)("h2",{id:"masonnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mason.nvim",\n  { "mason-org/mason-lspconfig.nvim", config = function() end },\n}\n')))),(0,a.kt)("h2",{id:"mason-lspconfignvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason-lspconfig.nvim"},"mason-lspconfig.nvim")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{ "mason-org/mason-lspconfig.nvim", config = function() end }\n')))),(0,a.kt)("h2",{id:"masonnvim-1"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")),(0,a.kt)("p",null," cmdline tools and lsp servers"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  ensure_installed = {\n    "stylua",\n    "shfmt",\n  },\n}\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n\n  "mason-org/mason.nvim",\n  cmd = "Mason",\n  keys = { { "<leader>cm", "<cmd>Mason<cr>", desc = "Mason" } },\n  build = ":MasonUpdate",\n  opts_extend = { "ensure_installed" },\n  opts = {\n    ensure_installed = {\n      "stylua",\n      "shfmt",\n    },\n  },\n  ---@param opts MasonSettings | {ensure_installed: string[]}\n  config = function(_, opts)\n    require("mason").setup(opts)\n    local mr = require("mason-registry")\n    mr:on("package:install:success", function()\n      vim.defer_fn(function()\n        -- trigger FileType event to possibly load this newly installed LSP server\n        require("lazy.core.handler.event").trigger({\n          event = "FileType",\n          buf = vim.api.nvim_get_current_buf(),\n        })\n      end, 100)\n    end)\n\n    mr.refresh(function()\n      for _, tool in ipairs(opts.ensure_installed) do\n        local p = mr.get_package(tool)\n        if not p:is_installed() then\n          p:install()\n        end\n      end\n    end)\n  end,\n}\n')))))}m.isMDXComponent=!0}}]);