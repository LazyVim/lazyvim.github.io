"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[5150],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(7294),a=t(6010);const l="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>T});var r=t(7462),a=t(7294),l=t(6010),o=t(2466),i=t(6550),s=t(1980),u=t(7392),c=t(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(l),(0,a.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(r.location.search);n.set(l,e),r.replace({...r.location,search:n.toString()})}),[l,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,l=p(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l}))),[s,u]=g({queryString:t,groupId:r}),[d,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,l]=(0,c.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:r}),h=(()=>{const e=s??d;return m({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var h=t(2389);const b="tabList__CuJ",v="tabItem_LNqP";function k(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),r=u[t].value;r!==i&&(d(n),s(r))},m=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:m,onClick:p},o,{className:(0,l.Z)("tabs__item",v,o?.className,{"tabs__item--active":i===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:r}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function x(e){const n=f(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",b)},a.createElement(k,(0,r.Z)({},e,n)),a.createElement(y,(0,r.Z)({},e,n)))}function T(e){const n=(0,h.Z)();return a.createElement(x,(0,r.Z)({key:String(n)},e))}},6897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=t(7462),a=(t(7294),t(3905)),l=t(4866),o=t(5162);const i={},s="Editor",u={unversionedId:"plugins/editor",id:"plugins/editor",title:"Editor",description:"grug-far.nvim",source:"@site/docs/plugins/editor.md",sourceDirName:"plugins",slug:"/plugins/editor",permalink:"/plugins/editor",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/plugins/editor.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Colorscheme",permalink:"/plugins/colorscheme"},next:{title:"Formatting",permalink:"/plugins/formatting"}},c={},d=[{value:"grug-far.nvim",id:"grug-farnvim",level:2},{value:"flash.nvim",id:"flashnvim",level:2},{value:"which-key.nvim",id:"which-keynvim",level:2},{value:"gitsigns.nvim",id:"gitsignsnvim",level:2},{value:"gitsigns.nvim",id:"gitsignsnvim-1",level:2},{value:"trouble.nvim",id:"troublenvim",level:2},{value:"todo-comments.nvim",id:"todo-commentsnvim",level:2}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"editor"},"Editor"),(0,a.kt)("h2",{id:"grug-farnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/MagicDuck/grug-far.nvim"},"grug-far.nvim")),(0,a.kt)("p",null," search/replace in multiple files"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = { headerMaxWidth = 80 }\n"))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "MagicDuck/grug-far.nvim",\n  opts = { headerMaxWidth = 80 },\n  cmd = "GrugFar",\n  keys = {\n    {\n      "<leader>sr",\n      function()\n        local grug = require("grug-far")\n        local ext = vim.bo.buftype == "" and vim.fn.expand("%:e")\n        grug.open({\n          transient = true,\n          prefills = {\n            filesFilter = ext and ext ~= "" and "*." .. ext or nil,\n          },\n        })\n      end,\n      mode = { "n", "v" },\n      desc = "Search and Replace",\n    },\n  },\n}\n')))),(0,a.kt)("h2",{id:"flashnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/flash.nvim"},"flash.nvim")),(0,a.kt)("p",null," Flash enhances the built-in search functionality by showing labels\nat the end of each match, letting you quickly jump to a specific\nlocation."),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/flash.nvim",\n  event = "VeryLazy",\n  vscode = true,\n  ---@type Flash.Config\n  opts = {},\n  -- stylua: ignore\n  keys = {\n    { "s", mode = { "n", "x", "o" }, function() require("flash").jump() end, desc = "Flash" },\n    { "S", mode = { "n", "o", "x" }, function() require("flash").treesitter() end, desc = "Flash Treesitter" },\n    { "r", mode = "o", function() require("flash").remote() end, desc = "Remote Flash" },\n    { "R", mode = { "o", "x" }, function() require("flash").treesitter_search() end, desc = "Treesitter Search" },\n    { "<c-s>", mode = { "c" }, function() require("flash").toggle() end, desc = "Toggle Flash Search" },\n  },\n}\n')))),(0,a.kt)("h2",{id:"which-keynvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/which-key.nvim"},"which-key.nvim")),(0,a.kt)("p",null," which-key helps you remember key bindings by showing a popup\nwith the active keybindings of the command you started typing."),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  preset = "helix",\n  defaults = {},\n  spec = {\n    {\n      mode = { "n", "v" },\n      { "<leader><tab>", group = "tabs" },\n      { "<leader>c", group = "code" },\n      { "<leader>d", group = "debug" },\n      { "<leader>dp", group = "profiler" },\n      { "<leader>f", group = "file/find" },\n      { "<leader>g", group = "git" },\n      { "<leader>gh", group = "hunks" },\n      { "<leader>q", group = "quit/session" },\n      { "<leader>s", group = "search" },\n      { "<leader>u", group = "ui", icon = { icon = "\udb81\ude75 ", color = "cyan" } },\n      { "<leader>x", group = "diagnostics/quickfix", icon = { icon = "\udb85\uddab ", color = "green" } },\n      { "[", group = "prev" },\n      { "]", group = "next" },\n      { "g", group = "goto" },\n      { "gs", group = "surround" },\n      { "z", group = "fold" },\n      {\n        "<leader>b",\n        group = "buffer",\n        expand = function()\n          return require("which-key.extras").expand.buf()\n        end,\n      },\n      {\n        "<leader>w",\n        group = "windows",\n        proxy = "<c-w>",\n        expand = function()\n          return require("which-key.extras").expand.win()\n        end,\n      },\n      -- better descriptions\n      { "gx", desc = "Open with system app" },\n    },\n  },\n}\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/which-key.nvim",\n  event = "VeryLazy",\n  opts_extend = { "spec" },\n  opts = {\n    preset = "helix",\n    defaults = {},\n    spec = {\n      {\n        mode = { "n", "v" },\n        { "<leader><tab>", group = "tabs" },\n        { "<leader>c", group = "code" },\n        { "<leader>d", group = "debug" },\n        { "<leader>dp", group = "profiler" },\n        { "<leader>f", group = "file/find" },\n        { "<leader>g", group = "git" },\n        { "<leader>gh", group = "hunks" },\n        { "<leader>q", group = "quit/session" },\n        { "<leader>s", group = "search" },\n        { "<leader>u", group = "ui", icon = { icon = "\udb81\ude75 ", color = "cyan" } },\n        { "<leader>x", group = "diagnostics/quickfix", icon = { icon = "\udb85\uddab ", color = "green" } },\n        { "[", group = "prev" },\n        { "]", group = "next" },\n        { "g", group = "goto" },\n        { "gs", group = "surround" },\n        { "z", group = "fold" },\n        {\n          "<leader>b",\n          group = "buffer",\n          expand = function()\n            return require("which-key.extras").expand.buf()\n          end,\n        },\n        {\n          "<leader>w",\n          group = "windows",\n          proxy = "<c-w>",\n          expand = function()\n            return require("which-key.extras").expand.win()\n          end,\n        },\n        -- better descriptions\n        { "gx", desc = "Open with system app" },\n      },\n    },\n  },\n  keys = {\n    {\n      "<leader>?",\n      function()\n        require("which-key").show({ global = false })\n      end,\n      desc = "Buffer Keymaps (which-key)",\n    },\n    {\n      "<c-w><space>",\n      function()\n        require("which-key").show({ keys = "<c-w>", loop = true })\n      end,\n      desc = "Window Hydra Mode (which-key)",\n    },\n  },\n  config = function(_, opts)\n    local wk = require("which-key")\n    wk.setup(opts)\n    if not vim.tbl_isempty(opts.defaults) then\n      LazyVim.warn("which-key: opts.defaults is deprecated. Please use opts.spec instead.")\n      wk.register(opts.defaults)\n    end\n  end,\n}\n')))),(0,a.kt)("h2",{id:"gitsignsnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/lewis6991/gitsigns.nvim"},"gitsigns.nvim")),(0,a.kt)("p",null," git signs highlights text that has changed since the list\ngit commit, and also lets you interactively stage & unstage\nhunks in a commit."),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  signs = {\n    add = { text = "\u258e" },\n    change = { text = "\u258e" },\n    delete = { text = "\uf0da" },\n    topdelete = { text = "\uf0da" },\n    changedelete = { text = "\u258e" },\n    untracked = { text = "\u258e" },\n  },\n  signs_staged = {\n    add = { text = "\u258e" },\n    change = { text = "\u258e" },\n    delete = { text = "\uf0da" },\n    topdelete = { text = "\uf0da" },\n    changedelete = { text = "\u258e" },\n  },\n  on_attach = function(buffer)\n    local gs = package.loaded.gitsigns\n\n    local function map(mode, l, r, desc)\n      vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })\n    end\n\n    -- stylua: ignore start\n    map("n", "]h", function()\n      if vim.wo.diff then\n        vim.cmd.normal({ "]c", bang = true })\n      else\n        gs.nav_hunk("next")\n      end\n    end, "Next Hunk")\n    map("n", "[h", function()\n      if vim.wo.diff then\n        vim.cmd.normal({ "[c", bang = true })\n      else\n        gs.nav_hunk("prev")\n      end\n    end, "Prev Hunk")\n    map("n", "]H", function() gs.nav_hunk("last") end, "Last Hunk")\n    map("n", "[H", function() gs.nav_hunk("first") end, "First Hunk")\n    map({ "n", "v" }, "<leader>ghs", ":Gitsigns stage_hunk<CR>", "Stage Hunk")\n    map({ "n", "v" }, "<leader>ghr", ":Gitsigns reset_hunk<CR>", "Reset Hunk")\n    map("n", "<leader>ghS", gs.stage_buffer, "Stage Buffer")\n    map("n", "<leader>ghu", gs.undo_stage_hunk, "Undo Stage Hunk")\n    map("n", "<leader>ghR", gs.reset_buffer, "Reset Buffer")\n    map("n", "<leader>ghp", gs.preview_hunk_inline, "Preview Hunk Inline")\n    map("n", "<leader>ghb", function() gs.blame_line({ full = true }) end, "Blame Line")\n    map("n", "<leader>ghB", function() gs.blame() end, "Blame Buffer")\n    map("n", "<leader>ghd", gs.diffthis, "Diff This")\n    map("n", "<leader>ghD", function() gs.diffthis("~") end, "Diff This ~")\n    map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>", "GitSigns Select Hunk")\n  end,\n}\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "lewis6991/gitsigns.nvim",\n  event = "LazyFile",\n  opts = {\n    signs = {\n      add = { text = "\u258e" },\n      change = { text = "\u258e" },\n      delete = { text = "\uf0da" },\n      topdelete = { text = "\uf0da" },\n      changedelete = { text = "\u258e" },\n      untracked = { text = "\u258e" },\n    },\n    signs_staged = {\n      add = { text = "\u258e" },\n      change = { text = "\u258e" },\n      delete = { text = "\uf0da" },\n      topdelete = { text = "\uf0da" },\n      changedelete = { text = "\u258e" },\n    },\n    on_attach = function(buffer)\n      local gs = package.loaded.gitsigns\n\n      local function map(mode, l, r, desc)\n        vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })\n      end\n\n      -- stylua: ignore start\n      map("n", "]h", function()\n        if vim.wo.diff then\n          vim.cmd.normal({ "]c", bang = true })\n        else\n          gs.nav_hunk("next")\n        end\n      end, "Next Hunk")\n      map("n", "[h", function()\n        if vim.wo.diff then\n          vim.cmd.normal({ "[c", bang = true })\n        else\n          gs.nav_hunk("prev")\n        end\n      end, "Prev Hunk")\n      map("n", "]H", function() gs.nav_hunk("last") end, "Last Hunk")\n      map("n", "[H", function() gs.nav_hunk("first") end, "First Hunk")\n      map({ "n", "v" }, "<leader>ghs", ":Gitsigns stage_hunk<CR>", "Stage Hunk")\n      map({ "n", "v" }, "<leader>ghr", ":Gitsigns reset_hunk<CR>", "Reset Hunk")\n      map("n", "<leader>ghS", gs.stage_buffer, "Stage Buffer")\n      map("n", "<leader>ghu", gs.undo_stage_hunk, "Undo Stage Hunk")\n      map("n", "<leader>ghR", gs.reset_buffer, "Reset Buffer")\n      map("n", "<leader>ghp", gs.preview_hunk_inline, "Preview Hunk Inline")\n      map("n", "<leader>ghb", function() gs.blame_line({ full = true }) end, "Blame Line")\n      map("n", "<leader>ghB", function() gs.blame() end, "Blame Buffer")\n      map("n", "<leader>ghd", gs.diffthis, "Diff This")\n      map("n", "<leader>ghD", function() gs.diffthis("~") end, "Diff This ~")\n      map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>", "GitSigns Select Hunk")\n    end,\n  },\n}\n')))),(0,a.kt)("h2",{id:"gitsignsnvim-1"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/lewis6991/gitsigns.nvim"},"gitsigns.nvim")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  Snacks.toggle({\n    name = "Git Signs",\n    get = function()\n      return require("gitsigns.config").config.signcolumn\n    end,\n    set = function(state)\n      require("gitsigns").toggle_signs(state)\n    end,\n  }):map("<leader>uG")\nend\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "gitsigns.nvim",\n  opts = function()\n    Snacks.toggle({\n      name = "Git Signs",\n      get = function()\n        return require("gitsigns.config").config.signcolumn\n      end,\n      set = function(state)\n        require("gitsigns").toggle_signs(state)\n      end,\n    }):map("<leader>uG")\n  end,\n}\n')))),(0,a.kt)("h2",{id:"troublenvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/trouble.nvim"},"trouble.nvim")),(0,a.kt)("p",null," better diagnostics list and others"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  modes = {\n    lsp = {\n      win = { position = "right" },\n    },\n  },\n}\n'))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/trouble.nvim",\n  cmd = { "Trouble" },\n  opts = {\n    modes = {\n      lsp = {\n        win = { position = "right" },\n      },\n    },\n  },\n  keys = {\n    { "<leader>xx", "<cmd>Trouble diagnostics toggle<cr>", desc = "Diagnostics (Trouble)" },\n    { "<leader>xX", "<cmd>Trouble diagnostics toggle filter.buf=0<cr>", desc = "Buffer Diagnostics (Trouble)" },\n    { "<leader>cs", "<cmd>Trouble symbols toggle<cr>", desc = "Symbols (Trouble)" },\n    { "<leader>cS", "<cmd>Trouble lsp toggle<cr>", desc = "LSP references/definitions/... (Trouble)" },\n    { "<leader>xL", "<cmd>Trouble loclist toggle<cr>", desc = "Location List (Trouble)" },\n    { "<leader>xQ", "<cmd>Trouble qflist toggle<cr>", desc = "Quickfix List (Trouble)" },\n    {\n      "[q",\n      function()\n        if require("trouble").is_open() then\n          require("trouble").prev({ skip_groups = true, jump = true })\n        else\n          local ok, err = pcall(vim.cmd.cprev)\n          if not ok then\n            vim.notify(err, vim.log.levels.ERROR)\n          end\n        end\n      end,\n      desc = "Previous Trouble/Quickfix Item",\n    },\n    {\n      "]q",\n      function()\n        if require("trouble").is_open() then\n          require("trouble").next({ skip_groups = true, jump = true })\n        else\n          local ok, err = pcall(vim.cmd.cnext)\n          if not ok then\n            vim.notify(err, vim.log.levels.ERROR)\n          end\n        end\n      end,\n      desc = "Next Trouble/Quickfix Item",\n    },\n  },\n}\n')))),(0,a.kt)("h2",{id:"todo-commentsnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/todo-comments.nvim"},"todo-comments.nvim")),(0,a.kt)("p",null," Finds and lists all of the TODO, HACK, BUG, etc comment\nin your project and loads them into a browsable list."),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,a.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/todo-comments.nvim",\n  cmd = { "TodoTrouble", "TodoTelescope" },\n  event = "LazyFile",\n  opts = {},\n  -- stylua: ignore\n  keys = {\n    { "]t", function() require("todo-comments").jump_next() end, desc = "Next Todo Comment" },\n    { "[t", function() require("todo-comments").jump_prev() end, desc = "Previous Todo Comment" },\n    { "<leader>xt", "<cmd>Trouble todo toggle<cr>", desc = "Todo (Trouble)" },\n    { "<leader>xT", "<cmd>Trouble todo toggle filter = {tag = {TODO,FIX,FIXME}}<cr>", desc = "Todo/Fix/Fixme (Trouble)" },\n    { "<leader>st", "<cmd>TodoTelescope<cr>", desc = "Todo" },\n    { "<leader>sT", "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme" },\n  },\n}\n')))))}m.isMDXComponent=!0}}]);