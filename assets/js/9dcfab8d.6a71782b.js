"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8116],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,k=d["".concat(o,".").concat(m)]||d[m]||p[m]||r;return t?a.createElement(k,s(s({ref:n},u),{},{components:t})):a.createElement(k,s({ref:n},u))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[d]="string"==typeof e?e:i,s[1]=l;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),i=t(6010);const r="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,s),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var a=t(7462),i=t(7294),r=t(6010),s=t(2466),l=t(6550),o=t(1980),c=t(7392),u=t(12);function d(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function k(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=p(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[o,c]=k({queryString:t,groupId:a}),[d,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,u.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),g=(()=>{const e=o??d;return m({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),f(e)}),[c,f,r]),tabValues:r}}var g=t(2389);const v="tabList__CuJ",b="tabItem_LNqP";function h(e){let{className:n,block:t,selectedValue:l,selectValue:o,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const n=e.currentTarget,t=u.indexOf(n),a=c[t].value;a!==l&&(d(n),o(a))},m=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:s}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:p},s,{className:(0,r.Z)("tabs__item",b,s?.className,{"tabs__item--active":l===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function N(e){const n=f(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",v)},i.createElement(h,(0,a.Z)({},e,n)),i.createElement(y,(0,a.Z)({},e,n)))}function x(e){const n=(0,g.Z)();return i.createElement(N,(0,a.Z)({key:String(n)},e))}},7969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=t(7462),i=(t(7294),t(3905)),r=t(4866),s=t(5162);const l={},o="Sidekick",c={unversionedId:"extras/ai/sidekick",id:"extras/ai/sidekick",title:"Sidekick",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/ai/sidekick.md",sourceDirName:"extras/ai",slug:"/extras/ai/sidekick",permalink:"/extras/ai/sidekick",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/ai/sidekick.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Copilot",permalink:"/extras/ai/copilot"},next:{title:"Supermaven",permalink:"/extras/ai/supermaven"}},u={},d=[{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"sidekick.nvim",id:"sidekicknvim",level:2},{value:"lualine.nvim <em>(optional)</em>",id:"lualinenvim-optional",level:2},{value:"snacks.nvim <em>(optional)</em>",id:"snacksnvim-optional",level:2}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sidekick"},(0,i.kt)("inlineCode",{parentName:"h1"},"Sidekick")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,i.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,i.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,i.kt)("h2",{id:"nvim-lspconfig"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,i.kt)("p",null," copilot-language-server"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  local sk = LazyVim.opts("sidekick.nvim") ---@type sidekick.Config|{}\n  if vim.tbl_get(sk, "nes", "enabled") ~= false then\n    opts.servers = opts.servers or {}\n    opts.servers.copilot = opts.servers.copilot or {}\n  end\nend\n'))),(0,i.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = function(_, opts)\n    local sk = LazyVim.opts("sidekick.nvim") ---@type sidekick.Config|{}\n    if vim.tbl_get(sk, "nes", "enabled") ~= false then\n      opts.servers = opts.servers or {}\n      opts.servers.copilot = opts.servers.copilot or {}\n    end\n  end,\n}\n')))),(0,i.kt)("h2",{id:"sidekicknvim"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/folke/sidekick.nvim"},"sidekick.nvim")),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  -- Accept inline suggestions or next edits\n  LazyVim.cmp.actions.ai_nes = function()\n    local Nes = require("sidekick.nes")\n    if Nes.have() and (Nes.jump() or Nes.apply()) then\n      return true\n    end\n  end\n  Snacks.toggle({\n    name = "Sidekick NES",\n    get = function()\n      return require("sidekick.nes").enabled\n    end,\n    set = function(state)\n      require("sidekick.nes").enable(state)\n    end,\n  }):map("<leader>uN")\nend\n'))),(0,i.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/sidekick.nvim",\n  opts = function()\n    -- Accept inline suggestions or next edits\n    LazyVim.cmp.actions.ai_nes = function()\n      local Nes = require("sidekick.nes")\n      if Nes.have() and (Nes.jump() or Nes.apply()) then\n        return true\n      end\n    end\n    Snacks.toggle({\n      name = "Sidekick NES",\n      get = function()\n        return require("sidekick.nes").enabled\n      end,\n      set = function(state)\n        require("sidekick.nes").enable(state)\n      end,\n    }):map("<leader>uN")\n  end,\n  -- stylua: ignore\n  keys = {\n    -- nes is also useful in normal mode\n    { "<tab>", LazyVim.cmp.map({ "ai_nes" }, "<tab>"), mode = { "n" }, expr = true },\n    { "<leader>a", "", desc = "+ai", mode = { "n", "v" } },\n    {\n      "<c-.>",\n      function() require("sidekick.cli").toggle() end,\n      desc = "Sidekick Toggle",\n      mode = { "n", "t", "i", "x" },\n    },\n    {\n      "<leader>aa",\n      function() require("sidekick.cli").toggle() end,\n      desc = "Sidekick Toggle CLI",\n    },\n    {\n      "<leader>as",\n      function() require("sidekick.cli").select() end,\n      -- Or to select only installed tools:\n      -- require("sidekick.cli").select({ filter = { installed = true } })\n      desc = "Select CLI",\n    },\n    {\n      "<leader>ad",\n      function() require("sidekick.cli").close() end,\n      desc = "Detach a CLI Session",\n    },\n    {\n      "<leader>at",\n      function() require("sidekick.cli").send({ msg = "{this}" }) end,\n      mode = { "x", "n" },\n      desc = "Send This",\n    },\n    {\n      "<leader>af",\n      function() require("sidekick.cli").send({ msg = "{file}" }) end,\n      desc = "Send File",\n    },\n    {\n      "<leader>av",\n      function() require("sidekick.cli").send({ msg = "{selection}" }) end,\n      mode = { "x" },\n      desc = "Send Visual Selection",\n    },\n    {\n      "<leader>ap",\n      function() require("sidekick.cli").prompt() end,\n      mode = { "n", "x" },\n      desc = "Sidekick Select Prompt",\n    },\n  },\n}\n')))),(0,i.kt)("h2",{id:"lualinenvim-optional"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/nvim-lualine/lualine.nvim"},"lualine.nvim")," ",(0,i.kt)("em",{parentName:"h2"},"(optional)")),(0,i.kt)("p",null," lualine"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  local icons = {\n    Error = { "\uf4b9 ", "DiagnosticError" },\n    Inactive = { "\uf4b9 ", "MsgArea" },\n    Warning = { "\uf4ba ", "DiagnosticWarn" },\n    Normal = { LazyVim.config.icons.kinds.Copilot, "Special" },\n  }\n  table.insert(opts.sections.lualine_x, 2, {\n    function()\n      local status = require("sidekick.status").get()\n      return status and vim.tbl_get(icons, status.kind, 1)\n    end,\n    cond = function()\n      return require("sidekick.status").get() ~= nil\n    end,\n    color = function()\n      local status = require("sidekick.status").get()\n      local hl = status and (status.busy and "DiagnosticWarn" or vim.tbl_get(icons, status.kind, 2))\n      return { fg = Snacks.util.color(hl) }\n    end,\n  })\n\n  table.insert(opts.sections.lualine_x, 2, {\n    function()\n      local status = require("sidekick.status").cli()\n      return "\uee0d " .. (#status > 1 and #status or "")\n    end,\n    cond = function()\n      return #require("sidekick.status").cli() > 0\n    end,\n    color = function()\n      return { fg = Snacks.util.color("Special") }\n    end,\n  })\nend\n'))),(0,i.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-lualine/lualine.nvim",\n  optional = true,\n  event = "VeryLazy",\n  opts = function(_, opts)\n    local icons = {\n      Error = { "\uf4b9 ", "DiagnosticError" },\n      Inactive = { "\uf4b9 ", "MsgArea" },\n      Warning = { "\uf4ba ", "DiagnosticWarn" },\n      Normal = { LazyVim.config.icons.kinds.Copilot, "Special" },\n    }\n    table.insert(opts.sections.lualine_x, 2, {\n      function()\n        local status = require("sidekick.status").get()\n        return status and vim.tbl_get(icons, status.kind, 1)\n      end,\n      cond = function()\n        return require("sidekick.status").get() ~= nil\n      end,\n      color = function()\n        local status = require("sidekick.status").get()\n        local hl = status and (status.busy and "DiagnosticWarn" or vim.tbl_get(icons, status.kind, 2))\n        return { fg = Snacks.util.color(hl) }\n      end,\n    })\n\n    table.insert(opts.sections.lualine_x, 2, {\n      function()\n        local status = require("sidekick.status").cli()\n        return "\uee0d " .. (#status > 1 and #status or "")\n      end,\n      cond = function()\n        return #require("sidekick.status").cli() > 0\n      end,\n      color = function()\n        return { fg = Snacks.util.color("Special") }\n      end,\n    })\n  end,\n}\n')))),(0,i.kt)("h2",{id:"snacksnvim-optional"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/folke/snacks.nvim"},"snacks.nvim")," ",(0,i.kt)("em",{parentName:"h2"},"(optional)")),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  picker = {\n    actions = {\n      sidekick_send = function(...)\n        return require("sidekick.cli.picker.snacks").send(...)\n      end,\n    },\n    win = {\n      input = {\n        keys = {\n          ["<a-a>"] = {\n            "sidekick_send",\n            mode = { "n", "i" },\n          },\n        },\n      },\n    },\n  },\n}\n'))),(0,i.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/snacks.nvim",\n  optional = true,\n  opts = {\n    picker = {\n      actions = {\n        sidekick_send = function(...)\n          return require("sidekick.cli.picker.snacks").send(...)\n        end,\n      },\n      win = {\n        input = {\n          keys = {\n            ["<a-a>"] = {\n              "sidekick_send",\n              mode = { "n", "i" },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n')))))}m.isMDXComponent=!0}}]);