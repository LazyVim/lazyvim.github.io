"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[7704],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),p=l,d=m["".concat(s,".").concat(p)]||m[p]||f[p]||i;return t?r.createElement(d,a(a({ref:n},c),{},{components:t})):r.createElement(d,a({ref:n},c))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,a=new Array(i);a[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:l,a[1]=o;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>a});var r=t(7294),l=t(6010);const i="tabItem_Ymn6";function a(e){let{children:n,hidden:t,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,a),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>k});var r=t(7462),l=t(7294),i=t(6010),a=t(2466),o=t(6550),s=t(1980),u=t(7392),c=t(12);function m(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:l}}=e;return{value:n,label:t,attributes:r,default:l}}))}function f(e){const{values:n,children:t}=e;return(0,l.useMemo)((()=>{const e=n??m(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function d(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(i),(0,l.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=f(e),[a,o]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[s,u]=d({queryString:t,groupId:r}),[m,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Nk)(t);return[r,(0,l.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),y=(()=>{const e=s??m;return p({value:e,tabValues:i})?e:null})();(0,l.useLayoutEffect)((()=>{y&&o(y)}),[y]);return{selectedValue:a,selectValue:(0,l.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),b(e)}),[u,b,i]),tabValues:i}}var y=t(2389);const v="tabList__CuJ",h="tabItem_LNqP";function g(e){let{className:n,block:t,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,a.o5)(),f=e=>{const n=e.currentTarget,t=c.indexOf(n),r=u[t].value;r!==o&&(m(n),s(r))},p=e=>{let n=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:a}=e;return l.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>c.push(e),onKeyDown:p,onClick:f},a,{className:(0,i.Z)("tabs__item",h,a?.className,{"tabs__item--active":o===n})}),t??n)})))}function _(e){let{lazy:n,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function w(e){const n=b(e);return l.createElement("div",{className:(0,i.Z)("tabs-container",v)},l.createElement(g,(0,r.Z)({},e,n)),l.createElement(_,(0,r.Z)({},e,n)))}function k(e){const n=(0,y.Z)();return l.createElement(w,(0,r.Z)({key:String(n)},e))}},6660:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var r=t(7462),l=(t(7294),t(3905)),i=t(4866),a=t(5162);const o={},s="Linting",u={unversionedId:"plugins/linting",id:"plugins/linting",title:"Linting",description:"nvim-lint",source:"@site/docs/plugins/linting.md",sourceDirName:"plugins",slug:"/plugins/linting",permalink:"/plugins/linting",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/plugins/linting.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Formatting",permalink:"/plugins/formatting"},next:{title:"LSP",permalink:"/plugins/lsp"}},c={},m=[{value:"nvim-lint",id:"nvim-lint",level:2}],f={toc:m};function p(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"linting"},"Linting"),(0,l.kt)("h2",{id:"nvim-lint"},(0,l.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-lint"},"nvim-lint")),(0,l.kt)("p",null," Asynchronously calls language-specific linter tools and reports\ntheir results via the ",(0,l.kt)("inlineCode",{parentName:"p"},"vim.diagnostic")," module."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  -- Event to trigger linters\n  events = { "BufWritePost", "BufReadPost", "InsertLeave" },\n  linters_by_ft = {\n    fish = { "fish" },\n    -- Use the "*" filetype to run linters on all filetypes.\n    -- [\'*\'] = { \'global linter\' },\n    -- Use the "_" filetype to run linters on filetypes that don\'t have other linters configured.\n    -- [\'_\'] = { \'fallback linter\' },\n    -- ["*"] = { "typos" },\n  },\n  -- LazyVim extension to easily override linter options\n  -- or add custom linters.\n  ---@type table<string,table>\n  linters = {\n    -- -- Example of using selene only when a selene.toml file is present\n    -- selene = {\n    --   -- `condition` is another LazyVim extension that allows you to\n    --   -- dynamically enable/disable linters based on the context.\n    --   condition = function(ctx)\n    --     return vim.fs.find({ "selene.toml" }, { path = ctx.filename, upward = true })[1]\n    --   end,\n    -- },\n  },\n}\n'))),(0,l.kt)(a.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mfussenegger/nvim-lint",\n  event = "LazyFile",\n  opts = {\n    -- Event to trigger linters\n    events = { "BufWritePost", "BufReadPost", "InsertLeave" },\n    linters_by_ft = {\n      fish = { "fish" },\n      -- Use the "*" filetype to run linters on all filetypes.\n      -- [\'*\'] = { \'global linter\' },\n      -- Use the "_" filetype to run linters on filetypes that don\'t have other linters configured.\n      -- [\'_\'] = { \'fallback linter\' },\n      -- ["*"] = { "typos" },\n    },\n    -- LazyVim extension to easily override linter options\n    -- or add custom linters.\n    ---@type table<string,table>\n    linters = {\n      -- -- Example of using selene only when a selene.toml file is present\n      -- selene = {\n      --   -- `condition` is another LazyVim extension that allows you to\n      --   -- dynamically enable/disable linters based on the context.\n      --   condition = function(ctx)\n      --     return vim.fs.find({ "selene.toml" }, { path = ctx.filename, upward = true })[1]\n      --   end,\n      -- },\n    },\n  },\n  config = function(_, opts)\n    local M = {}\n\n    local lint = require("lint")\n    for name, linter in pairs(opts.linters) do\n      if type(linter) == "table" and type(lint.linters[name]) == "table" then\n        lint.linters[name] = vim.tbl_deep_extend("force", lint.linters[name], linter)\n        if type(linter.prepend_args) == "table" then\n          lint.linters[name].args = lint.linters[name].args or {}\n          vim.list_extend(lint.linters[name].args, linter.prepend_args)\n        end\n      else\n        lint.linters[name] = linter\n      end\n    end\n    lint.linters_by_ft = opts.linters_by_ft\n\n    function M.debounce(ms, fn)\n      local timer = vim.uv.new_timer()\n      return function(...)\n        local argv = { ... }\n        timer:start(ms, 0, function()\n          timer:stop()\n          vim.schedule_wrap(fn)(unpack(argv))\n        end)\n      end\n    end\n\n    function M.lint()\n      -- Use nvim-lint\'s logic first:\n      -- * checks if linters exist for the full filetype first\n      -- * otherwise will split filetype by "." and add all those linters\n      -- * this differs from conform.nvim which only uses the first filetype that has a formatter\n      local names = lint._resolve_linter_by_ft(vim.bo.filetype)\n\n      -- Create a copy of the names table to avoid modifying the original.\n      names = vim.list_extend({}, names)\n\n      -- Add fallback linters.\n      if #names == 0 then\n        vim.list_extend(names, lint.linters_by_ft["_"] or {})\n      end\n\n      -- Add global linters.\n      vim.list_extend(names, lint.linters_by_ft["*"] or {})\n\n      -- Filter out linters that don\'t exist or don\'t match the condition.\n      local ctx = { filename = vim.api.nvim_buf_get_name(0) }\n      ctx.dirname = vim.fn.fnamemodify(ctx.filename, ":h")\n      names = vim.tbl_filter(function(name)\n        local linter = lint.linters[name]\n        if not linter then\n          LazyVim.warn("Linter not found: " .. name, { title = "nvim-lint" })\n        end\n        return linter and not (type(linter) == "table" and linter.condition and not linter.condition(ctx))\n      end, names)\n\n      -- Run linters.\n      if #names > 0 then\n        lint.try_lint(names)\n      end\n    end\n\n    vim.api.nvim_create_autocmd(opts.events, {\n      group = vim.api.nvim_create_augroup("nvim-lint", { clear = true }),\n      callback = M.debounce(100, M.lint),\n    })\n  end,\n}\n')))))}p.isMDXComponent=!0}}]);