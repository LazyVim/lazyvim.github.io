"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[43],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(t),p=a,d=m["".concat(s,".").concat(p)]||m[p]||f[p]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>N});var r=t(7462),a=t(7294),o=t(6010),i=t(2466),l=t(6550),s=t(1980),u=t(7392),c=t(12);function m(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function f(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??m(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function d(e){let{queryString:n=!1,groupId:t}=e;const r=(0,l.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,o=f(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[s,u]=d({queryString:t,groupId:r}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,c.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:r}),b=(()=>{const e=s??m;return p({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,o]),tabValues:o}}var b=t(2389);const h="tabList__CuJ",y="tabItem_LNqP";function v(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,i.o5)(),f=e=>{const n=e.currentTarget,t=c.indexOf(n),r=u[t].value;r!==l&&(m(n),s(r))},p=e=>{let n=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:p,onClick:f},i,{className:(0,o.Z)("tabs__item",y,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function w(e){const n=g(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",h)},a.createElement(v,(0,r.Z)({},e,n)),a.createElement(k,(0,r.Z)({},e,n)))}function N(e){const n=(0,b.Z)();return a.createElement(w,(0,r.Z)({key:String(n)},e))}},2740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var r=t(7462),a=(t(7294),t(3905)),o=t(4866),i=t(5162);const l={},s="Formatting",u={unversionedId:"plugins/formatting",id:"plugins/formatting",title:"Formatting",description:"LazyVim uses conform.nvim for formatting.",source:"@site/docs/plugins/formatting.md",sourceDirName:"plugins",slug:"/plugins/formatting",permalink:"/plugins/formatting",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/plugins/formatting.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Editor",permalink:"/plugins/editor"},next:{title:"Linting",permalink:"/plugins/linting"}},c={},m=[{value:"conform.nvim",id:"conformnvim",level:2},{value:"mason.nvim",id:"masonnvim",level:2}],f={toc:m};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"formatting"},"Formatting"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"LazyVim")," uses ",(0,a.kt)("inlineCode",{parentName:"p"},"conform.nvim")," for formatting."),(0,a.kt)("p",null,"Configuring ",(0,a.kt)("inlineCode",{parentName:"p"},"conform.nvim"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"opts.format"),": extra options passed to ",(0,a.kt)("inlineCode",{parentName:"li"},'require("conform").format(options)')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"opts.formatters"),": options will be merged with builtin formatters, or you can specify a new formatter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"opts.formatters[NAME].prepend_args"),": extra arguments passed to the formatter command.\nIf you want to fully override the ",(0,a.kt)("inlineCode",{parentName:"li"},"args"),", just use ",(0,a.kt)("inlineCode",{parentName:"li"},"args")," instead of ",(0,a.kt)("inlineCode",{parentName:"li"},"prepend_args"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"opts.formatters_by_ft"),": specify which formatters to use for each filetype.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Don't override ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin.config")," directly, since this ",(0,a.kt)("strong",{parentName:"p"},"will")," break LazyVim formatting.")),(0,a.kt)("h2",{id:"conformnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/stevearc/conform.nvim"},"conform.nvim")),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local plugin = require("lazy.core.config").plugins["conform.nvim"]\n  if plugin.config ~= M.setup then\n    LazyVim.error({\n      "Don\'t set `plugin.config` for `conform.nvim`.\\n",\n      "This will break **LazyVim** formatting.\\n",\n      "Please refer to the docs at https://www.lazyvim.org/plugins/formatting",\n    }, { title = "LazyVim" })\n  end\n  ---@type conform.setupOpts\n  local opts = {\n    default_format_opts = {\n      timeout_ms = 3000,\n      async = false, -- not recommended to change\n      quiet = false, -- not recommended to change\n      lsp_format = "fallback", -- not recommended to change\n    },\n    formatters_by_ft = {\n      lua = { "stylua" },\n      fish = { "fish_indent" },\n      sh = { "shfmt" },\n    },\n    -- The options you set here will be merged with the builtin formatters.\n    -- You can also define any custom formatters here.\n    ---@type table<string, conform.FormatterConfigOverride|fun(bufnr: integer): nil|conform.FormatterConfigOverride>\n    formatters = {\n      injected = { options = { ignore_errors = true } },\n      -- # Example of using dprint only when a dprint.json file is present\n      -- dprint = {\n      --   condition = function(ctx)\n      --     return vim.fs.find({ "dprint.json" }, { path = ctx.filename, upward = true })[1]\n      --   end,\n      -- },\n      --\n      -- # Example of using shfmt with extra args\n      -- shfmt = {\n      --   prepend_args = { "-i", "2", "-ci" },\n      -- },\n    },\n  }\n  return opts\nend\n'))),(0,a.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "stevearc/conform.nvim",\n  dependencies = { "mason.nvim" },\n  lazy = true,\n  cmd = "ConformInfo",\n  keys = {\n    {\n      "<leader>cF",\n      function()\n        require("conform").format({ formatters = { "injected" }, timeout_ms = 3000 })\n      end,\n      mode = { "n", "v" },\n      desc = "Format Injected Langs",\n    },\n  },\n  init = function()\n    -- Install the conform formatter on VeryLazy\n    LazyVim.on_very_lazy(function()\n      LazyVim.format.register({\n        name = "conform.nvim",\n        priority = 100,\n        primary = true,\n        format = function(buf)\n          require("conform").format({ bufnr = buf })\n        end,\n        sources = function(buf)\n          local ret = require("conform").list_formatters(buf)\n          ---@param v conform.FormatterInfo\n          return vim.tbl_map(function(v)\n            return v.name\n          end, ret)\n        end,\n      })\n    end)\n  end,\n  opts = function()\n    local plugin = require("lazy.core.config").plugins["conform.nvim"]\n    if plugin.config ~= M.setup then\n      LazyVim.error({\n        "Don\'t set `plugin.config` for `conform.nvim`.\\n",\n        "This will break **LazyVim** formatting.\\n",\n        "Please refer to the docs at https://www.lazyvim.org/plugins/formatting",\n      }, { title = "LazyVim" })\n    end\n    ---@type conform.setupOpts\n    local opts = {\n      default_format_opts = {\n        timeout_ms = 3000,\n        async = false, -- not recommended to change\n        quiet = false, -- not recommended to change\n        lsp_format = "fallback", -- not recommended to change\n      },\n      formatters_by_ft = {\n        lua = { "stylua" },\n        fish = { "fish_indent" },\n        sh = { "shfmt" },\n      },\n      -- The options you set here will be merged with the builtin formatters.\n      -- You can also define any custom formatters here.\n      ---@type table<string, conform.FormatterConfigOverride|fun(bufnr: integer): nil|conform.FormatterConfigOverride>\n      formatters = {\n        injected = { options = { ignore_errors = true } },\n        -- # Example of using dprint only when a dprint.json file is present\n        -- dprint = {\n        --   condition = function(ctx)\n        --     return vim.fs.find({ "dprint.json" }, { path = ctx.filename, upward = true })[1]\n        --   end,\n        -- },\n        --\n        -- # Example of using shfmt with extra args\n        -- shfmt = {\n        --   prepend_args = { "-i", "2", "-ci" },\n        -- },\n      },\n    }\n    return opts\n  end,\n  config = M.setup,\n}\n')))),(0,a.kt)("h2",{id:"masonnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/mason-org/mason.nvim"},"mason.nvim")),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,a.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{ "mason.nvim" }\n')))))}p.isMDXComponent=!0}}]);