"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[2042],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,m=p["".concat(u,".").concat(d)]||p[d]||h[d]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(7462),a=n(7294),i=n(6010),l=n(2466),o=n(6550),u=n(1980),s=n(7392),c=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=h(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[u,s]=m({queryString:n,groupId:r}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=u??p;return d({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),f(e)}),[s,f,i]),tabValues:i}}var b=n(2389);const g="tabList__CuJ",y="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:o,selectValue:u,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),h=e=>{const t=e.currentTarget,n=c.indexOf(t),r=s[n].value;r!==o&&(p(t),u(r))},d=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:h},l,{className:(0,i.Z)("tabs__item",y,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function x(e){const t=f(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",g)},a.createElement(v,(0,r.Z)({},e,t)),a.createElement(w,(0,r.Z)({},e,t)))}function k(e){const t=(0,b.Z)();return a.createElement(x,(0,r.Z)({key:String(t)},e))}},3606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=n(4866),l=n(5162);const o={},u="Mini Hipatterns",s={unversionedId:"extras/util/mini-hipatterns",id:"extras/util/mini-hipatterns",title:"Mini Hipatterns",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/util/mini-hipatterns.md",sourceDirName:"extras/util",slug:"/extras/util/mini-hipatterns",permalink:"/extras/util/mini-hipatterns",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/util/mini-hipatterns.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gitui",permalink:"/extras/util/gitui"},next:{title:"Octo",permalink:"/extras/util/octo"}},c={},p=[{value:"mini.hipatterns",id:"minihipatterns",level:2}],h={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mini-hipatterns"},"Mini Hipatterns"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,a.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,a.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,a.kt)("h2",{id:"minihipatterns"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/nvim-mini/mini.hipatterns"},"mini.hipatterns")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local hi = require("mini.hipatterns")\n  return {\n    -- custom LazyVim option to enable the tailwind integration\n    tailwind = {\n      enabled = true,\n      ft = {\n        "astro",\n        "css",\n        "heex",\n        "html",\n        "html-eex",\n        "javascript",\n        "javascriptreact",\n        "rust",\n        "svelte",\n        "typescript",\n        "typescriptreact",\n        "vue",\n      },\n      -- full: the whole css class will be highlighted\n      -- compact: only the color will be highlighted\n      style = "full",\n    },\n    highlighters = {\n      hex_color = hi.gen_highlighter.hex_color({ priority = 2000 }),\n      shorthand = {\n        pattern = "()#%x%x%x()%f[^%x%w]",\n        group = function(_, _, data)\n          ---@type string\n          local match = data.full_match\n          local r, g, b = match:sub(2, 2), match:sub(3, 3), match:sub(4, 4)\n          local hex_color = "#" .. r .. r .. g .. g .. b .. b\n\n          return MiniHipatterns.compute_hex_color_group(hex_color, "bg")\n        end,\n        extmark_opts = { priority = 2000 },\n      },\n    },\n  }\nend\n'))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-mini/mini.hipatterns",\n  recommended = true,\n  desc = "Highlight colors in your code. Also includes Tailwind CSS support.",\n  event = "LazyFile",\n  opts = function()\n    local hi = require("mini.hipatterns")\n    return {\n      -- custom LazyVim option to enable the tailwind integration\n      tailwind = {\n        enabled = true,\n        ft = {\n          "astro",\n          "css",\n          "heex",\n          "html",\n          "html-eex",\n          "javascript",\n          "javascriptreact",\n          "rust",\n          "svelte",\n          "typescript",\n          "typescriptreact",\n          "vue",\n        },\n        -- full: the whole css class will be highlighted\n        -- compact: only the color will be highlighted\n        style = "full",\n      },\n      highlighters = {\n        hex_color = hi.gen_highlighter.hex_color({ priority = 2000 }),\n        shorthand = {\n          pattern = "()#%x%x%x()%f[^%x%w]",\n          group = function(_, _, data)\n            ---@type string\n            local match = data.full_match\n            local r, g, b = match:sub(2, 2), match:sub(3, 3), match:sub(4, 4)\n            local hex_color = "#" .. r .. r .. g .. g .. b .. b\n\n            return MiniHipatterns.compute_hex_color_group(hex_color, "bg")\n          end,\n          extmark_opts = { priority = 2000 },\n        },\n      },\n    }\n  end,\n  config = function(_, opts)\n    if type(opts.tailwind) == "table" and opts.tailwind.enabled then\n      -- reset hl groups when colorscheme changes\n      vim.api.nvim_create_autocmd("ColorScheme", {\n        callback = function()\n          M.hl = {}\n        end,\n      })\n      opts.highlighters.tailwind = {\n        pattern = function()\n          if not vim.tbl_contains(opts.tailwind.ft, vim.bo.filetype) then\n            return\n          end\n          if opts.tailwind.style == "full" then\n            return "%f[%w:-]()[%w:-]+%-[a-z%-]+%-%d+()%f[^%w:-]"\n          elseif opts.tailwind.style == "compact" then\n            return "%f[%w:-][%w:-]+%-()[a-z%-]+%-%d+()%f[^%w:-]"\n          end\n        end,\n        group = function(_, _, m)\n          ---@type string\n          local match = m.full_match\n          ---@type string, number\n          local color, shade = match:match("[%w-]+%-([a-z%-]+)%-(%d+)")\n          shade = tonumber(shade)\n          local bg = vim.tbl_get(M.colors, color, shade)\n          if bg then\n            local hl = "MiniHipatternsTailwind" .. color .. shade\n            if not M.hl[hl] then\n              M.hl[hl] = true\n              local bg_shade = shade == 500 and 950 or shade < 500 and 900 or 100\n              local fg = vim.tbl_get(M.colors, color, bg_shade)\n              vim.api.nvim_set_hl(0, hl, { bg = "#" .. bg, fg = "#" .. fg })\n            end\n            return hl\n          end\n        end,\n        extmark_opts = { priority = 2000 },\n      }\n    end\n    require("mini.hipatterns").setup(opts)\n  end,\n}\n')))))}d.isMDXComponent=!0}}]);