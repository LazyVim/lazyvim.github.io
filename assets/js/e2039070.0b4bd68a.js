"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[3251],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(t),f=a,m=d["".concat(u,".").concat(f)]||d[f]||p[f]||o;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var r=t(7462),a=t(7294),o=t(6010),l=t(2466),i=t(6550),u=t(1980),s=t(7392),c=t(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function f(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,u._X)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,o=p(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[u,s]=m({queryString:t,groupId:r}),[d,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,c.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:r}),g=(()=>{const e=u??d;return f({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),b(e)}),[s,b,o]),tabValues:o}}var g=t(2389);const v="tabList__CuJ",h="tabItem_LNqP";function y(e){let{className:n,block:t,selectedValue:i,selectValue:u,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),r=s[t].value;r!==i&&(d(n),u(r))},f=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},s.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:f,onClick:p},l,{className:(0,o.Z)("tabs__item",h,l?.className,{"tabs__item--active":i===n})}),t??n)})))}function _(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function w(e){const n=b(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",v)},a.createElement(y,(0,r.Z)({},e,n)),a.createElement(_,(0,r.Z)({},e,n)))}function x(e){const n=(0,g.Z)();return a.createElement(w,(0,r.Z)({key:String(n)},e))}},1658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(7462),a=(t(7294),t(3905)),o=t(4866),l=t(5162);const i={},u="Neo-tree",s={unversionedId:"extras/editor/neo-tree",id:"extras/editor/neo-tree",title:"Neo-tree",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/editor/neo-tree.md",sourceDirName:"extras/editor",slug:"/extras/editor/neo-tree",permalink:"/extras/editor/neo-tree",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/editor/neo-tree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Navic",permalink:"/extras/editor/navic"},next:{title:"Outline",permalink:"/extras/editor/outline"}},c={},d=[{value:"neo-tree.nvim",id:"neo-treenvim",level:2}],p={toc:d};function f(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"neo-tree"},(0,a.kt)("inlineCode",{parentName:"h1"},"Neo-tree")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,a.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,a.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,a.kt)("h2",{id:"neo-treenvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neo-tree/neo-tree.nvim"},"neo-tree.nvim")),(0,a.kt)("p",null," file explorer"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  sources = { "filesystem", "buffers", "git_status" },\n  open_files_do_not_replace_types = { "terminal", "Trouble", "trouble", "qf", "Outline" },\n  filesystem = {\n    bind_to_cwd = false,\n    follow_current_file = { enabled = true },\n    use_libuv_file_watcher = true,\n  },\n  window = {\n    mappings = {\n      ["l"] = "open",\n      ["h"] = "close_node",\n      ["<space>"] = "none",\n      ["Y"] = {\n        function(state)\n          local node = state.tree:get_node()\n          local path = node:get_id()\n          vim.fn.setreg("+", path, "c")\n        end,\n        desc = "Copy Path to Clipboard",\n      },\n      ["O"] = {\n        function(state)\n          require("lazy.util").open(state.tree:get_node().path, { system = true })\n        end,\n        desc = "Open with System Application",\n      },\n      ["P"] = { "toggle_preview", config = { use_float = false } },\n    },\n  },\n  default_component_configs = {\n    indent = {\n      with_expanders = true, -- if nil and file nesting is enabled, will enable expanders\n      expander_collapsed = "\uf460",\n      expander_expanded = "\uf47c",\n      expander_highlight = "NeoTreeExpander",\n    },\n    git_status = {\n      symbols = {\n        unstaged = "\udb80\udd31",\n        staged = "\udb83\udc52",\n      },\n    },\n  },\n}\n'))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-neo-tree/neo-tree.nvim",\n  cmd = "Neotree",\n  keys = {\n    {\n      "<leader>fe",\n      function()\n        require("neo-tree.command").execute({ toggle = true, dir = LazyVim.root() })\n      end,\n      desc = "Explorer NeoTree (Root Dir)",\n    },\n    {\n      "<leader>fE",\n      function()\n        require("neo-tree.command").execute({ toggle = true, dir = vim.uv.cwd() })\n      end,\n      desc = "Explorer NeoTree (cwd)",\n    },\n    { "<leader>e", "<leader>fe", desc = "Explorer NeoTree (Root Dir)", remap = true },\n    { "<leader>E", "<leader>fE", desc = "Explorer NeoTree (cwd)", remap = true },\n    {\n      "<leader>ge",\n      function()\n        require("neo-tree.command").execute({ source = "git_status", toggle = true })\n      end,\n      desc = "Git Explorer",\n    },\n    {\n      "<leader>be",\n      function()\n        require("neo-tree.command").execute({ source = "buffers", toggle = true })\n      end,\n      desc = "Buffer Explorer",\n    },\n  },\n  deactivate = function()\n    vim.cmd([[Neotree close]])\n  end,\n  init = function()\n    -- FIX: use `autocmd` for lazy-loading neo-tree instead of directly requiring it,\n    -- because `cwd` is not set up properly.\n    vim.api.nvim_create_autocmd("BufEnter", {\n      group = vim.api.nvim_create_augroup("Neotree_start_directory", { clear = true }),\n      desc = "Start Neo-tree with directory",\n      once = true,\n      callback = function()\n        if package.loaded["neo-tree"] then\n          return\n        else\n          local stats = vim.uv.fs_stat(vim.fn.argv(0))\n          if stats and stats.type == "directory" then\n            require("neo-tree")\n          end\n        end\n      end,\n    })\n  end,\n  opts = {\n    sources = { "filesystem", "buffers", "git_status" },\n    open_files_do_not_replace_types = { "terminal", "Trouble", "trouble", "qf", "Outline" },\n    filesystem = {\n      bind_to_cwd = false,\n      follow_current_file = { enabled = true },\n      use_libuv_file_watcher = true,\n    },\n    window = {\n      mappings = {\n        ["l"] = "open",\n        ["h"] = "close_node",\n        ["<space>"] = "none",\n        ["Y"] = {\n          function(state)\n            local node = state.tree:get_node()\n            local path = node:get_id()\n            vim.fn.setreg("+", path, "c")\n          end,\n          desc = "Copy Path to Clipboard",\n        },\n        ["O"] = {\n          function(state)\n            require("lazy.util").open(state.tree:get_node().path, { system = true })\n          end,\n          desc = "Open with System Application",\n        },\n        ["P"] = { "toggle_preview", config = { use_float = false } },\n      },\n    },\n    default_component_configs = {\n      indent = {\n        with_expanders = true, -- if nil and file nesting is enabled, will enable expanders\n        expander_collapsed = "\uf460",\n        expander_expanded = "\uf47c",\n        expander_highlight = "NeoTreeExpander",\n      },\n      git_status = {\n        symbols = {\n          unstaged = "\udb80\udd31",\n          staged = "\udb83\udc52",\n        },\n      },\n    },\n  },\n  config = function(_, opts)\n    local function on_move(data)\n      Snacks.rename.on_rename_file(data.source, data.destination)\n    end\n\n    local events = require("neo-tree.events")\n    opts.event_handlers = opts.event_handlers or {}\n    vim.list_extend(opts.event_handlers, {\n      { event = events.FILE_MOVED, handler = on_move },\n      { event = events.FILE_RENAMED, handler = on_move },\n    })\n    require("neo-tree").setup(opts)\n    vim.api.nvim_create_autocmd("TermClose", {\n      pattern = "*lazygit",\n      callback = function()\n        if package.loaded["neo-tree.sources.git_status"] then\n          require("neo-tree.sources.git_status").refresh()\n        end\n      end,\n    })\n  end,\n}\n')))))}f.isMDXComponent=!0}}]);